// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/configure/template/configure_template.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateRequestMultiError, or nil if none found.
func (m *ListTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListTemplateRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListTemplateRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := ListTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTemplateRequestMultiError(errors)
	}

	return nil
}

// ListTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateRequestMultiError) AllErrors() []error { return m }

// ListTemplateRequestValidationError is the validation error returned by
// ListTemplateRequest.Validate if the designated constraints aren't met.
type ListTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateRequestValidationError) ErrorName() string {
	return "ListTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateRequestValidationError{}

// Validate checks the field values on ListTemplateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateReplyMultiError, or nil if none found.
func (m *ListTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplateReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplateReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplateReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplateReplyMultiError(errors)
	}

	return nil
}

// ListTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by ListTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type ListTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateReplyMultiError) AllErrors() []error { return m }

// ListTemplateReplyValidationError is the validation error returned by
// ListTemplateReply.Validate if the designated constraints aren't met.
type ListTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateReplyValidationError) ErrorName() string {
	return "ListTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateReplyValidationError{}

// Validate checks the field values on CurrentTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentTemplateRequestMultiError, or nil if none found.
func (m *CurrentTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := CurrentTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CurrentTemplateRequestMultiError(errors)
	}

	return nil
}

// CurrentTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CurrentTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CurrentTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentTemplateRequestMultiError) AllErrors() []error { return m }

// CurrentTemplateRequestValidationError is the validation error returned by
// CurrentTemplateRequest.Validate if the designated constraints aren't met.
type CurrentTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentTemplateRequestValidationError) ErrorName() string {
	return "CurrentTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentTemplateRequestValidationError{}

// Validate checks the field values on CurrentTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentTemplateReplyMultiError, or nil if none found.
func (m *CurrentTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for Format

	// no validation rules for IsUse

	// no validation rules for Compare

	// no validation rules for Content

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return CurrentTemplateReplyMultiError(errors)
	}

	return nil
}

// CurrentTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by CurrentTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type CurrentTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentTemplateReplyMultiError) AllErrors() []error { return m }

// CurrentTemplateReplyValidationError is the validation error returned by
// CurrentTemplateReply.Validate if the designated constraints aren't met.
type CurrentTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentTemplateReplyValidationError) ErrorName() string {
	return "CurrentTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentTemplateReplyValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetTemplateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on GetTemplateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateReplyMultiError, or nil if none found.
func (m *GetTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for Format

	// no validation rules for IsUse

	// no validation rules for Compare

	// no validation rules for Content

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetTemplateReplyMultiError(errors)
	}

	return nil
}

// GetTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by GetTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateReplyMultiError) AllErrors() []error { return m }

// GetTemplateReplyValidationError is the validation error returned by
// GetTemplateReply.Validate if the designated constraints aren't met.
type GetTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateReplyValidationError) ErrorName() string { return "GetTemplateReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateReplyValidationError{}

// Validate checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateRequestMultiError, or nil if none found.
func (m *CreateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := CreateTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 3 {
		err := CreateTemplateRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 64 {
		err := CreateTemplateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateTemplateRequest_Format_InLookup[m.GetFormat()]; !ok {
		err := CreateTemplateRequestValidationError{
			field:  "Format",
			reason: "value must be in list [json yaml]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetFormat()); l < 1 || l > 64 {
		err := CreateTemplateRequestValidationError{
			field:  "Format",
			reason: "value length must be between 1 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateRequestMultiError) AllErrors() []error { return m }

// CreateTemplateRequestValidationError is the validation error returned by
// CreateTemplateRequest.Validate if the designated constraints aren't met.
type CreateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateRequestValidationError) ErrorName() string {
	return "CreateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateRequestValidationError{}

var _CreateTemplateRequest_Format_InLookup = map[string]struct{}{
	"json": {},
	"yaml": {},
}

// Validate checks the field values on CreateTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateReplyMultiError, or nil if none found.
func (m *CreateTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTemplateReplyMultiError(errors)
	}

	return nil
}

// CreateTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateReplyMultiError) AllErrors() []error { return m }

// CreateTemplateReplyValidationError is the validation error returned by
// CreateTemplateReply.Validate if the designated constraints aren't met.
type CreateTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateReplyValidationError) ErrorName() string {
	return "CreateTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateReplyValidationError{}

// Validate checks the field values on SwitchTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SwitchTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwitchTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwitchTemplateRequestMultiError, or nil if none found.
func (m *SwitchTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SwitchTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := SwitchTemplateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := SwitchTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SwitchTemplateRequestMultiError(errors)
	}

	return nil
}

// SwitchTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by SwitchTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type SwitchTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwitchTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwitchTemplateRequestMultiError) AllErrors() []error { return m }

// SwitchTemplateRequestValidationError is the validation error returned by
// SwitchTemplateRequest.Validate if the designated constraints aren't met.
type SwitchTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwitchTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwitchTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwitchTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwitchTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwitchTemplateRequestValidationError) ErrorName() string {
	return "SwitchTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SwitchTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwitchTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwitchTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwitchTemplateRequestValidationError{}

// Validate checks the field values on SwitchTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SwitchTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwitchTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwitchTemplateReplyMultiError, or nil if none found.
func (m *SwitchTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SwitchTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SwitchTemplateReplyMultiError(errors)
	}

	return nil
}

// SwitchTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by SwitchTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type SwitchTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwitchTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwitchTemplateReplyMultiError) AllErrors() []error { return m }

// SwitchTemplateReplyValidationError is the validation error returned by
// SwitchTemplateReply.Validate if the designated constraints aren't met.
type SwitchTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwitchTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwitchTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwitchTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwitchTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwitchTemplateReplyValidationError) ErrorName() string {
	return "SwitchTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SwitchTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwitchTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwitchTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwitchTemplateReplyValidationError{}

// Validate checks the field values on PreviewTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewTemplateRequestMultiError, or nil if none found.
func (m *PreviewTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEnvId() <= 0 {
		err := PreviewTemplateRequestValidationError{
			field:  "EnvId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := PreviewTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PreviewTemplateRequest_Format_InLookup[m.GetFormat()]; !ok {
		err := PreviewTemplateRequestValidationError{
			field:  "Format",
			reason: "value must be in list [json yaml]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFormat()) < 1 {
		err := PreviewTemplateRequestValidationError{
			field:  "Format",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 7 {
		err := PreviewTemplateRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PreviewTemplateRequestMultiError(errors)
	}

	return nil
}

// PreviewTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by PreviewTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type PreviewTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewTemplateRequestMultiError) AllErrors() []error { return m }

// PreviewTemplateRequestValidationError is the validation error returned by
// PreviewTemplateRequest.Validate if the designated constraints aren't met.
type PreviewTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewTemplateRequestValidationError) ErrorName() string {
	return "PreviewTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewTemplateRequestValidationError{}

var _PreviewTemplateRequest_Format_InLookup = map[string]struct{}{
	"json": {},
	"yaml": {},
}

// Validate checks the field values on PreviewTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewTemplateReplyMultiError, or nil if none found.
func (m *PreviewTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	if len(errors) > 0 {
		return PreviewTemplateReplyMultiError(errors)
	}

	return nil
}

// PreviewTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by PreviewTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type PreviewTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewTemplateReplyMultiError) AllErrors() []error { return m }

// PreviewTemplateReplyValidationError is the validation error returned by
// PreviewTemplateReply.Validate if the designated constraints aren't met.
type PreviewTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewTemplateReplyValidationError) ErrorName() string {
	return "PreviewTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewTemplateReplyValidationError{}

// Validate checks the field values on ParseTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseTemplateRequestMultiError, or nil if none found.
func (m *ParseTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := ParseTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEnvId() <= 0 {
		err := ParseTemplateRequestValidationError{
			field:  "EnvId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParseTemplateRequestMultiError(errors)
	}

	return nil
}

// ParseTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ParseTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ParseTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTemplateRequestMultiError) AllErrors() []error { return m }

// ParseTemplateRequestValidationError is the validation error returned by
// ParseTemplateRequest.Validate if the designated constraints aren't met.
type ParseTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTemplateRequestValidationError) ErrorName() string {
	return "ParseTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ParseTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTemplateRequestValidationError{}

// Validate checks the field values on ParseTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseTemplateReplyMultiError, or nil if none found.
func (m *ParseTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Format

	if len(errors) > 0 {
		return ParseTemplateReplyMultiError(errors)
	}

	return nil
}

// ParseTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by ParseTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type ParseTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTemplateReplyMultiError) AllErrors() []error { return m }

// ParseTemplateReplyValidationError is the validation error returned by
// ParseTemplateReply.Validate if the designated constraints aren't met.
type ParseTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTemplateReplyValidationError) ErrorName() string {
	return "ParseTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ParseTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTemplateReplyValidationError{}

// Validate checks the field values on CompareTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompareTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompareTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompareTemplateRequestMultiError, or nil if none found.
func (m *CompareTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompareTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CompareTemplateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CompareTemplateRequest_Format_InLookup[m.GetFormat()]; !ok {
		err := CompareTemplateRequestValidationError{
			field:  "Format",
			reason: "value must be in list [json yaml]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFormat()) < 1 {
		err := CompareTemplateRequestValidationError{
			field:  "Format",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CompareTemplateRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompareTemplateRequestMultiError(errors)
	}

	return nil
}

// CompareTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CompareTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CompareTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompareTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompareTemplateRequestMultiError) AllErrors() []error { return m }

// CompareTemplateRequestValidationError is the validation error returned by
// CompareTemplateRequest.Validate if the designated constraints aren't met.
type CompareTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompareTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompareTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompareTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompareTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompareTemplateRequestValidationError) ErrorName() string {
	return "CompareTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompareTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompareTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompareTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompareTemplateRequestValidationError{}

var _CompareTemplateRequest_Format_InLookup = map[string]struct{}{
	"json": {},
	"yaml": {},
}

// Validate checks the field values on CompareTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompareTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompareTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompareTemplateReplyMultiError, or nil if none found.
func (m *CompareTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CompareTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompareTemplateReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompareTemplateReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompareTemplateReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompareTemplateReplyMultiError(errors)
	}

	return nil
}

// CompareTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by CompareTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type CompareTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompareTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompareTemplateReplyMultiError) AllErrors() []error { return m }

// CompareTemplateReplyValidationError is the validation error returned by
// CompareTemplateReply.Validate if the designated constraints aren't met.
type CompareTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompareTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompareTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompareTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompareTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompareTemplateReplyValidationError) ErrorName() string {
	return "CompareTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CompareTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompareTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompareTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompareTemplateReplyValidationError{}

// Validate checks the field values on CompareTemplateInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompareTemplateInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompareTemplateInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompareTemplateInfoMultiError, or nil if none found.
func (m *CompareTemplateInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CompareTemplateInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Key

	// no validation rules for Old

	// no validation rules for Cur

	if len(errors) > 0 {
		return CompareTemplateInfoMultiError(errors)
	}

	return nil
}

// CompareTemplateInfoMultiError is an error wrapping multiple validation
// errors returned by CompareTemplateInfo.ValidateAll() if the designated
// constraints aren't met.
type CompareTemplateInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompareTemplateInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompareTemplateInfoMultiError) AllErrors() []error { return m }

// CompareTemplateInfoValidationError is the validation error returned by
// CompareTemplateInfo.Validate if the designated constraints aren't met.
type CompareTemplateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompareTemplateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompareTemplateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompareTemplateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompareTemplateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompareTemplateInfoValidationError) ErrorName() string {
	return "CompareTemplateInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CompareTemplateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompareTemplateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompareTemplateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompareTemplateInfoValidationError{}

// Validate checks the field values on ListTemplateReply_Template with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplateReply_Template) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplateReply_Template with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplateReply_TemplateMultiError, or nil if none found.
func (m *ListTemplateReply_Template) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplateReply_Template) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for Format

	// no validation rules for IsUse

	// no validation rules for Compare

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ListTemplateReply_TemplateMultiError(errors)
	}

	return nil
}

// ListTemplateReply_TemplateMultiError is an error wrapping multiple
// validation errors returned by ListTemplateReply_Template.ValidateAll() if
// the designated constraints aren't met.
type ListTemplateReply_TemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplateReply_TemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplateReply_TemplateMultiError) AllErrors() []error { return m }

// ListTemplateReply_TemplateValidationError is the validation error returned
// by ListTemplateReply_Template.Validate if the designated constraints aren't met.
type ListTemplateReply_TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplateReply_TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplateReply_TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplateReply_TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplateReply_TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplateReply_TemplateValidationError) ErrorName() string {
	return "ListTemplateReply_TemplateValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplateReply_TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplateReply_Template.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplateReply_TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplateReply_TemplateValidationError{}
