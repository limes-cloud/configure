// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/configure/resource/configure_resource_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationResourceCreateResource = "/configure.api.configure.resource.v1.Resource/CreateResource"
const OperationResourceDeleteResource = "/configure.api.configure.resource.v1.Resource/DeleteResource"
const OperationResourceGetResource = "/configure.api.configure.resource.v1.Resource/GetResource"
const OperationResourceListResource = "/configure.api.configure.resource.v1.Resource/ListResource"
const OperationResourceListResourceValue = "/configure.api.configure.resource.v1.Resource/ListResourceValue"
const OperationResourceUpdateResource = "/configure.api.configure.resource.v1.Resource/UpdateResource"
const OperationResourceUpdateResourceValue = "/configure.api.configure.resource.v1.Resource/UpdateResourceValue"

type ResourceHTTPServer interface {
	// CreateResource CreateResource 创建资源配置信息
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceReply, error)
	// DeleteResource DeleteResource 删除资源配置信息
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceReply, error)
	// GetResource GetResource 获取指定的资源配置信息
	GetResource(context.Context, *GetResourceRequest) (*GetResourceReply, error)
	// ListResource ListResource 获取资源配置信息列表
	ListResource(context.Context, *ListResourceRequest) (*ListResourceReply, error)
	// ListResourceValue ListResourceValue 获取业务配置值信息列表
	ListResourceValue(context.Context, *ListResourceValueRequest) (*ListResourceValueReply, error)
	// UpdateResource UpdateResource 更新资源配置信息
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceReply, error)
	// UpdateResourceValue UpdateResourceValue 更新业务配置值信息
	UpdateResourceValue(context.Context, *UpdateResourceValueRequest) (*UpdateResourceValueReply, error)
}

func RegisterResourceHTTPServer(s *http.Server, srv ResourceHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/api/v1/resource", _Resource_GetResource0_HTTP_Handler(srv))
	r.GET("/configure/api/v1/resources", _Resource_ListResource0_HTTP_Handler(srv))
	r.POST("/configure/api/v1/resource", _Resource_CreateResource0_HTTP_Handler(srv))
	r.PUT("/configure/api/v1/resource", _Resource_UpdateResource0_HTTP_Handler(srv))
	r.DELETE("/configure/api/v1/resource", _Resource_DeleteResource0_HTTP_Handler(srv))
	r.GET("/configure/api/v1/resource/values", _Resource_ListResourceValue0_HTTP_Handler(srv))
	r.PUT("/configure/api/v1/resource/values", _Resource_UpdateResourceValue0_HTTP_Handler(srv))
}

func _Resource_GetResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceGetResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResource(ctx, req.(*GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_ListResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceListResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListResource(ctx, req.(*ListResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_CreateResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceCreateResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateResource(ctx, req.(*CreateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_UpdateResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceUpdateResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResource(ctx, req.(*UpdateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_DeleteResource0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_ListResourceValue0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListResourceValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceListResourceValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListResourceValue(ctx, req.(*ListResourceValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListResourceValueReply)
		return ctx.Result(200, reply)
	}
}

func _Resource_UpdateResourceValue0_HTTP_Handler(srv ResourceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationResourceUpdateResourceValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceValue(ctx, req.(*UpdateResourceValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateResourceValueReply)
		return ctx.Result(200, reply)
	}
}

type ResourceHTTPClient interface {
	CreateResource(ctx context.Context, req *CreateResourceRequest, opts ...http.CallOption) (rsp *CreateResourceReply, err error)
	DeleteResource(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *DeleteResourceReply, err error)
	GetResource(ctx context.Context, req *GetResourceRequest, opts ...http.CallOption) (rsp *GetResourceReply, err error)
	ListResource(ctx context.Context, req *ListResourceRequest, opts ...http.CallOption) (rsp *ListResourceReply, err error)
	ListResourceValue(ctx context.Context, req *ListResourceValueRequest, opts ...http.CallOption) (rsp *ListResourceValueReply, err error)
	UpdateResource(ctx context.Context, req *UpdateResourceRequest, opts ...http.CallOption) (rsp *UpdateResourceReply, err error)
	UpdateResourceValue(ctx context.Context, req *UpdateResourceValueRequest, opts ...http.CallOption) (rsp *UpdateResourceValueReply, err error)
}

type ResourceHTTPClientImpl struct {
	cc *http.Client
}

func NewResourceHTTPClient(client *http.Client) ResourceHTTPClient {
	return &ResourceHTTPClientImpl{client}
}

func (c *ResourceHTTPClientImpl) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...http.CallOption) (*CreateResourceReply, error) {
	var out CreateResourceReply
	pattern := "/configure/api/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceCreateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*DeleteResourceReply, error) {
	var out DeleteResourceReply
	pattern := "/configure/api/v1/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) GetResource(ctx context.Context, in *GetResourceRequest, opts ...http.CallOption) (*GetResourceReply, error) {
	var out GetResourceReply
	pattern := "/configure/api/v1/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceGetResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) ListResource(ctx context.Context, in *ListResourceRequest, opts ...http.CallOption) (*ListResourceReply, error) {
	var out ListResourceReply
	pattern := "/configure/api/v1/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceListResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) ListResourceValue(ctx context.Context, in *ListResourceValueRequest, opts ...http.CallOption) (*ListResourceValueReply, error) {
	var out ListResourceValueReply
	pattern := "/configure/api/v1/resource/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationResourceListResourceValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...http.CallOption) (*UpdateResourceReply, error) {
	var out UpdateResourceReply
	pattern := "/configure/api/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceUpdateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ResourceHTTPClientImpl) UpdateResourceValue(ctx context.Context, in *UpdateResourceValueRequest, opts ...http.CallOption) (*UpdateResourceValueReply, error) {
	var out UpdateResourceValueReply
	pattern := "/configure/api/v1/resource/values"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationResourceUpdateResourceValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
