// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/configure/env/configure_env_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEnvCreateEnv = "/configure.api.configure.env.v1.Env/CreateEnv"
const OperationEnvDeleteEnv = "/configure.api.configure.env.v1.Env/DeleteEnv"
const OperationEnvGetEnvToken = "/configure.api.configure.env.v1.Env/GetEnvToken"
const OperationEnvListEnv = "/configure.api.configure.env.v1.Env/ListEnv"
const OperationEnvResetEnvToken = "/configure.api.configure.env.v1.Env/ResetEnvToken"
const OperationEnvUpdateEnv = "/configure.api.configure.env.v1.Env/UpdateEnv"

type EnvHTTPServer interface {
	// CreateEnv CreateEnv 创建环境信息
	CreateEnv(context.Context, *CreateEnvRequest) (*CreateEnvReply, error)
	// DeleteEnv DeleteEnv 删除环境信息
	DeleteEnv(context.Context, *DeleteEnvRequest) (*DeleteEnvReply, error)
	// GetEnvToken GetEnvToken 获取环境token
	GetEnvToken(context.Context, *GetEnvTokenRequest) (*GetEnvTokenReply, error)
	// ListEnv ListEnv 获取环境信息列表
	ListEnv(context.Context, *ListEnvRequest) (*ListEnvReply, error)
	// ResetEnvToken ResetEnvToken 重置环境token
	ResetEnvToken(context.Context, *ResetEnvTokenRequest) (*ResetEnvTokenReply, error)
	// UpdateEnv UpdateEnv 更新环境信息
	UpdateEnv(context.Context, *UpdateEnvRequest) (*UpdateEnvReply, error)
}

func RegisterEnvHTTPServer(s *http.Server, srv EnvHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/api/v1/envs", _Env_ListEnv0_HTTP_Handler(srv))
	r.POST("/configure/api/v1/env", _Env_CreateEnv0_HTTP_Handler(srv))
	r.PUT("/configure/api/v1/env", _Env_UpdateEnv0_HTTP_Handler(srv))
	r.DELETE("/configure/api/v1/env", _Env_DeleteEnv0_HTTP_Handler(srv))
	r.GET("/configure/api/v1/env/token", _Env_GetEnvToken0_HTTP_Handler(srv))
	r.PUT("/configure/api/v1/env/token", _Env_ResetEnvToken0_HTTP_Handler(srv))
}

func _Env_ListEnv0_HTTP_Handler(srv EnvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListEnvRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvListEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListEnv(ctx, req.(*ListEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Env_CreateEnv0_HTTP_Handler(srv EnvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateEnvRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvCreateEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateEnv(ctx, req.(*CreateEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Env_UpdateEnv0_HTTP_Handler(srv EnvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEnvRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvUpdateEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateEnv(ctx, req.(*UpdateEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Env_DeleteEnv0_HTTP_Handler(srv EnvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEnvRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvDeleteEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteEnv(ctx, req.(*DeleteEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Env_GetEnvToken0_HTTP_Handler(srv EnvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEnvTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvGetEnvToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetEnvToken(ctx, req.(*GetEnvTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEnvTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Env_ResetEnvToken0_HTTP_Handler(srv EnvHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetEnvTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEnvResetEnvToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ResetEnvToken(ctx, req.(*ResetEnvTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetEnvTokenReply)
		return ctx.Result(200, reply)
	}
}

type EnvHTTPClient interface {
	CreateEnv(ctx context.Context, req *CreateEnvRequest, opts ...http.CallOption) (rsp *CreateEnvReply, err error)
	DeleteEnv(ctx context.Context, req *DeleteEnvRequest, opts ...http.CallOption) (rsp *DeleteEnvReply, err error)
	GetEnvToken(ctx context.Context, req *GetEnvTokenRequest, opts ...http.CallOption) (rsp *GetEnvTokenReply, err error)
	ListEnv(ctx context.Context, req *ListEnvRequest, opts ...http.CallOption) (rsp *ListEnvReply, err error)
	ResetEnvToken(ctx context.Context, req *ResetEnvTokenRequest, opts ...http.CallOption) (rsp *ResetEnvTokenReply, err error)
	UpdateEnv(ctx context.Context, req *UpdateEnvRequest, opts ...http.CallOption) (rsp *UpdateEnvReply, err error)
}

type EnvHTTPClientImpl struct {
	cc *http.Client
}

func NewEnvHTTPClient(client *http.Client) EnvHTTPClient {
	return &EnvHTTPClientImpl{client}
}

func (c *EnvHTTPClientImpl) CreateEnv(ctx context.Context, in *CreateEnvRequest, opts ...http.CallOption) (*CreateEnvReply, error) {
	var out CreateEnvReply
	pattern := "/configure/api/v1/env"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEnvCreateEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvHTTPClientImpl) DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...http.CallOption) (*DeleteEnvReply, error) {
	var out DeleteEnvReply
	pattern := "/configure/api/v1/env"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEnvDeleteEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvHTTPClientImpl) GetEnvToken(ctx context.Context, in *GetEnvTokenRequest, opts ...http.CallOption) (*GetEnvTokenReply, error) {
	var out GetEnvTokenReply
	pattern := "/configure/api/v1/env/token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEnvGetEnvToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvHTTPClientImpl) ListEnv(ctx context.Context, in *ListEnvRequest, opts ...http.CallOption) (*ListEnvReply, error) {
	var out ListEnvReply
	pattern := "/configure/api/v1/envs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationEnvListEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvHTTPClientImpl) ResetEnvToken(ctx context.Context, in *ResetEnvTokenRequest, opts ...http.CallOption) (*ResetEnvTokenReply, error) {
	var out ResetEnvTokenReply
	pattern := "/configure/api/v1/env/token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEnvResetEnvToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EnvHTTPClientImpl) UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...http.CallOption) (*UpdateEnvReply, error) {
	var out UpdateEnvReply
	pattern := "/configure/api/v1/env"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEnvUpdateEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
