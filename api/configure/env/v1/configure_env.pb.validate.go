// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/configure/env/configure_env.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetEnvRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetEnvRequestMultiError, or
// nil if none found.
func (m *GetEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {

		if m.GetId() <= 0 {
			err := GetEnvRequestValidationError{
				field:  "Id",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {

		if utf8.RuneCountInString(m.GetKeyword()) < 1 {
			err := GetEnvRequestValidationError{
				field:  "Keyword",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetEnvRequestMultiError(errors)
	}

	return nil
}

// GetEnvRequestMultiError is an error wrapping multiple validation errors
// returned by GetEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnvRequestMultiError) AllErrors() []error { return m }

// GetEnvRequestValidationError is the validation error returned by
// GetEnvRequest.Validate if the designated constraints aren't met.
type GetEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvRequestValidationError) ErrorName() string { return "GetEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvRequestValidationError{}

// Validate checks the field values on GetEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetEnvReplyMultiError, or
// nil if none found.
func (m *GetEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return GetEnvReplyMultiError(errors)
	}

	return nil
}

// GetEnvReplyMultiError is an error wrapping multiple validation errors
// returned by GetEnvReply.ValidateAll() if the designated constraints aren't met.
type GetEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnvReplyMultiError) AllErrors() []error { return m }

// GetEnvReplyValidationError is the validation error returned by
// GetEnvReply.Validate if the designated constraints aren't met.
type GetEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvReplyValidationError) ErrorName() string { return "GetEnvReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvReplyValidationError{}

// Validate checks the field values on ListEnvRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListEnvRequestMultiError,
// or nil if none found.
func (m *ListEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListEnvRequestMultiError(errors)
	}

	return nil
}

// ListEnvRequestMultiError is an error wrapping multiple validation errors
// returned by ListEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEnvRequestMultiError) AllErrors() []error { return m }

// ListEnvRequestValidationError is the validation error returned by
// ListEnvRequest.Validate if the designated constraints aren't met.
type ListEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvRequestValidationError) ErrorName() string { return "ListEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvRequestValidationError{}

// Validate checks the field values on ListEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEnvReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListEnvReplyMultiError, or
// nil if none found.
func (m *ListEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEnvReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEnvReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEnvReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEnvReplyMultiError(errors)
	}

	return nil
}

// ListEnvReplyMultiError is an error wrapping multiple validation errors
// returned by ListEnvReply.ValidateAll() if the designated constraints aren't met.
type ListEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEnvReplyMultiError) AllErrors() []error { return m }

// ListEnvReplyValidationError is the validation error returned by
// ListEnvReply.Validate if the designated constraints aren't met.
type ListEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvReplyValidationError) ErrorName() string { return "ListEnvReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvReplyValidationError{}

// Validate checks the field values on CreateEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnvRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnvRequestMultiError, or nil if none found.
func (m *CreateEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateEnvRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateEnvRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateEnvRequestMultiError(errors)
	}

	return nil
}

// CreateEnvRequestMultiError is an error wrapping multiple validation errors
// returned by CreateEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnvRequestMultiError) AllErrors() []error { return m }

// CreateEnvRequestValidationError is the validation error returned by
// CreateEnvRequest.Validate if the designated constraints aren't met.
type CreateEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnvRequestValidationError) ErrorName() string { return "CreateEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnvRequestValidationError{}

// Validate checks the field values on CreateEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnvReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateEnvReplyMultiError,
// or nil if none found.
func (m *CreateEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEnvReplyMultiError(errors)
	}

	return nil
}

// CreateEnvReplyMultiError is an error wrapping multiple validation errors
// returned by CreateEnvReply.ValidateAll() if the designated constraints
// aren't met.
type CreateEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnvReplyMultiError) AllErrors() []error { return m }

// CreateEnvReplyValidationError is the validation error returned by
// CreateEnvReply.Validate if the designated constraints aren't met.
type CreateEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnvReplyValidationError) ErrorName() string { return "CreateEnvReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnvReplyValidationError{}

// Validate checks the field values on UpdateEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnvRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEnvRequestMultiError, or nil if none found.
func (m *UpdateEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateEnvRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Name

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateEnvRequestMultiError(errors)
	}

	return nil
}

// UpdateEnvRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnvRequestMultiError) AllErrors() []error { return m }

// UpdateEnvRequestValidationError is the validation error returned by
// UpdateEnvRequest.Validate if the designated constraints aren't met.
type UpdateEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvRequestValidationError) ErrorName() string { return "UpdateEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvRequestValidationError{}

// Validate checks the field values on UpdateEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnvReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateEnvReplyMultiError,
// or nil if none found.
func (m *UpdateEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEnvReplyMultiError(errors)
	}

	return nil
}

// UpdateEnvReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateEnvReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnvReplyMultiError) AllErrors() []error { return m }

// UpdateEnvReplyValidationError is the validation error returned by
// UpdateEnvReply.Validate if the designated constraints aren't met.
type UpdateEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvReplyValidationError) ErrorName() string { return "UpdateEnvReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvReplyValidationError{}

// Validate checks the field values on DeleteEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnvRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnvRequestMultiError, or nil if none found.
func (m *DeleteEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 0 {
		err := DeleteEnvRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEnvRequestMultiError(errors)
	}

	return nil
}

// DeleteEnvRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnvRequestMultiError) AllErrors() []error { return m }

// DeleteEnvRequestValidationError is the validation error returned by
// DeleteEnvRequest.Validate if the designated constraints aren't met.
type DeleteEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvRequestValidationError) ErrorName() string { return "DeleteEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvRequestValidationError{}

// Validate checks the field values on DeleteEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnvReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteEnvReplyMultiError,
// or nil if none found.
func (m *DeleteEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEnvReplyMultiError(errors)
	}

	return nil
}

// DeleteEnvReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteEnvReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnvReplyMultiError) AllErrors() []error { return m }

// DeleteEnvReplyValidationError is the validation error returned by
// DeleteEnvReply.Validate if the designated constraints aren't met.
type DeleteEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvReplyValidationError) ErrorName() string { return "DeleteEnvReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvReplyValidationError{}

// Validate checks the field values on GetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEnvTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEnvTokenRequestMultiError, or nil if none found.
func (m *GetEnvTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnvTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEnvTokenRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEnvTokenRequestMultiError(errors)
	}

	return nil
}

// GetEnvTokenRequestMultiError is an error wrapping multiple validation errors
// returned by GetEnvTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEnvTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnvTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnvTokenRequestMultiError) AllErrors() []error { return m }

// GetEnvTokenRequestValidationError is the validation error returned by
// GetEnvTokenRequest.Validate if the designated constraints aren't met.
type GetEnvTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvTokenRequestValidationError) ErrorName() string {
	return "GetEnvTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEnvTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvTokenRequestValidationError{}

// Validate checks the field values on GetEnvTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEnvTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnvTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEnvTokenReplyMultiError, or nil if none found.
func (m *GetEnvTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnvTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetEnvTokenReplyMultiError(errors)
	}

	return nil
}

// GetEnvTokenReplyMultiError is an error wrapping multiple validation errors
// returned by GetEnvTokenReply.ValidateAll() if the designated constraints
// aren't met.
type GetEnvTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnvTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnvTokenReplyMultiError) AllErrors() []error { return m }

// GetEnvTokenReplyValidationError is the validation error returned by
// GetEnvTokenReply.Validate if the designated constraints aren't met.
type GetEnvTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvTokenReplyValidationError) ErrorName() string { return "GetEnvTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetEnvTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvTokenReplyValidationError{}

// Validate checks the field values on ResetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetEnvTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetEnvTokenRequestMultiError, or nil if none found.
func (m *ResetEnvTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetEnvTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResetEnvTokenRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetEnvTokenRequestMultiError(errors)
	}

	return nil
}

// ResetEnvTokenRequestMultiError is an error wrapping multiple validation
// errors returned by ResetEnvTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetEnvTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetEnvTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetEnvTokenRequestMultiError) AllErrors() []error { return m }

// ResetEnvTokenRequestValidationError is the validation error returned by
// ResetEnvTokenRequest.Validate if the designated constraints aren't met.
type ResetEnvTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetEnvTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetEnvTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetEnvTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetEnvTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetEnvTokenRequestValidationError) ErrorName() string {
	return "ResetEnvTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetEnvTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetEnvTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetEnvTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetEnvTokenRequestValidationError{}

// Validate checks the field values on ResetEnvTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetEnvTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetEnvTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetEnvTokenReplyMultiError, or nil if none found.
func (m *ResetEnvTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetEnvTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ResetEnvTokenReplyMultiError(errors)
	}

	return nil
}

// ResetEnvTokenReplyMultiError is an error wrapping multiple validation errors
// returned by ResetEnvTokenReply.ValidateAll() if the designated constraints
// aren't met.
type ResetEnvTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetEnvTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetEnvTokenReplyMultiError) AllErrors() []error { return m }

// ResetEnvTokenReplyValidationError is the validation error returned by
// ResetEnvTokenReply.Validate if the designated constraints aren't met.
type ResetEnvTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetEnvTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetEnvTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetEnvTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetEnvTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetEnvTokenReplyValidationError) ErrorName() string {
	return "ResetEnvTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResetEnvTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetEnvTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetEnvTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetEnvTokenReplyValidationError{}

// Validate checks the field values on ListEnvReply_Env with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEnvReply_Env) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEnvReply_Env with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEnvReply_EnvMultiError, or nil if none found.
func (m *ListEnvReply_Env) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEnvReply_Env) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListEnvReply_EnvMultiError(errors)
	}

	return nil
}

// ListEnvReply_EnvMultiError is an error wrapping multiple validation errors
// returned by ListEnvReply_Env.ValidateAll() if the designated constraints
// aren't met.
type ListEnvReply_EnvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEnvReply_EnvMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEnvReply_EnvMultiError) AllErrors() []error { return m }

// ListEnvReply_EnvValidationError is the validation error returned by
// ListEnvReply_Env.Validate if the designated constraints aren't met.
type ListEnvReply_EnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvReply_EnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvReply_EnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvReply_EnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvReply_EnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvReply_EnvValidationError) ErrorName() string { return "ListEnvReply_EnvValidationError" }

// Error satisfies the builtin error interface
func (e ListEnvReply_EnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvReply_Env.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvReply_EnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvReply_EnvValidationError{}
