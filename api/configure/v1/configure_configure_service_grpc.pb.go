// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: configure_configure_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_GetConfigure_FullMethodName     = "/configure_configure.Service/GetConfigure"
	Service_UpdateConfigure_FullMethodName  = "/configure_configure.Service/UpdateConfigure"
	Service_CompareConfigure_FullMethodName = "/configure_configure.Service/CompareConfigure"
	Service_WatchConfigure_FullMethodName   = "/configure_configure.Service/WatchConfigure"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*GetConfigureReply, error)
	UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CompareConfigure(ctx context.Context, in *CompareConfigureRequest, opts ...grpc.CallOption) (*CompareConfigureReply, error)
	WatchConfigure(ctx context.Context, in *WatchConfigureRequest, opts ...grpc.CallOption) (Service_WatchConfigureClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*GetConfigureReply, error) {
	out := new(GetConfigureReply)
	err := c.cc.Invoke(ctx, Service_GetConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CompareConfigure(ctx context.Context, in *CompareConfigureRequest, opts ...grpc.CallOption) (*CompareConfigureReply, error) {
	out := new(CompareConfigureReply)
	err := c.cc.Invoke(ctx, Service_CompareConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WatchConfigure(ctx context.Context, in *WatchConfigureRequest, opts ...grpc.CallOption) (Service_WatchConfigureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_WatchConfigure_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceWatchConfigureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_WatchConfigureClient interface {
	Recv() (*WatchConfigureReply, error)
	grpc.ClientStream
}

type serviceWatchConfigureClient struct {
	grpc.ClientStream
}

func (x *serviceWatchConfigureClient) Recv() (*WatchConfigureReply, error) {
	m := new(WatchConfigureReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	GetConfigure(context.Context, *GetConfigureRequest) (*GetConfigureReply, error)
	UpdateConfigure(context.Context, *UpdateConfigureRequest) (*emptypb.Empty, error)
	CompareConfigure(context.Context, *CompareConfigureRequest) (*CompareConfigureReply, error)
	WatchConfigure(*WatchConfigureRequest, Service_WatchConfigureServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) GetConfigure(context.Context, *GetConfigureRequest) (*GetConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigure not implemented")
}
func (UnimplementedServiceServer) UpdateConfigure(context.Context, *UpdateConfigureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigure not implemented")
}
func (UnimplementedServiceServer) CompareConfigure(context.Context, *CompareConfigureRequest) (*CompareConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareConfigure not implemented")
}
func (UnimplementedServiceServer) WatchConfigure(*WatchConfigureRequest, Service_WatchConfigureServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConfigure not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_GetConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConfigure(ctx, req.(*GetConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateConfigure(ctx, req.(*UpdateConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CompareConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CompareConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CompareConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CompareConfigure(ctx, req.(*CompareConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WatchConfigure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConfigureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).WatchConfigure(m, &serviceWatchConfigureServer{stream})
}

type Service_WatchConfigureServer interface {
	Send(*WatchConfigureReply) error
	grpc.ServerStream
}

type serviceWatchConfigureServer struct {
	grpc.ServerStream
}

func (x *serviceWatchConfigureServer) Send(m *WatchConfigureReply) error {
	return x.ServerStream.SendMsg(m)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configure_configure.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigure",
			Handler:    _Service_GetConfigure_Handler,
		},
		{
			MethodName: "UpdateConfigure",
			Handler:    _Service_UpdateConfigure_Handler,
		},
		{
			MethodName: "CompareConfigure",
			Handler:    _Service_CompareConfigure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConfigure",
			Handler:       _Service_WatchConfigure_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "configure_configure_service.proto",
}
