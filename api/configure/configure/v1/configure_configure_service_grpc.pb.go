// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/configure/configure/configure_configure_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Configure_GetConfigure_FullMethodName     = "/configure.api.configure.configure.v1.Configure/GetConfigure"
	Configure_UpdateConfigure_FullMethodName  = "/configure.api.configure.configure.v1.Configure/UpdateConfigure"
	Configure_CompareConfigure_FullMethodName = "/configure.api.configure.configure.v1.Configure/CompareConfigure"
	Configure_WatchConfigure_FullMethodName   = "/configure.api.configure.configure.v1.Configure/WatchConfigure"
)

// ConfigureClient is the client API for Configure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigureClient interface {
	GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*GetConfigureReply, error)
	UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*UpdateConfigureReply, error)
	CompareConfigure(ctx context.Context, in *CompareConfigureRequest, opts ...grpc.CallOption) (*CompareConfigureReply, error)
	WatchConfigure(ctx context.Context, in *WatchConfigureRequest, opts ...grpc.CallOption) (Configure_WatchConfigureClient, error)
}

type configureClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigureClient(cc grpc.ClientConnInterface) ConfigureClient {
	return &configureClient{cc}
}

func (c *configureClient) GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*GetConfigureReply, error) {
	out := new(GetConfigureReply)
	err := c.cc.Invoke(ctx, Configure_GetConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*UpdateConfigureReply, error) {
	out := new(UpdateConfigureReply)
	err := c.cc.Invoke(ctx, Configure_UpdateConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) CompareConfigure(ctx context.Context, in *CompareConfigureRequest, opts ...grpc.CallOption) (*CompareConfigureReply, error) {
	out := new(CompareConfigureReply)
	err := c.cc.Invoke(ctx, Configure_CompareConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) WatchConfigure(ctx context.Context, in *WatchConfigureRequest, opts ...grpc.CallOption) (Configure_WatchConfigureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Configure_ServiceDesc.Streams[0], Configure_WatchConfigure_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configureWatchConfigureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Configure_WatchConfigureClient interface {
	Recv() (*WatchConfigureReply, error)
	grpc.ClientStream
}

type configureWatchConfigureClient struct {
	grpc.ClientStream
}

func (x *configureWatchConfigureClient) Recv() (*WatchConfigureReply, error) {
	m := new(WatchConfigureReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigureServer is the server API for Configure service.
// All implementations must embed UnimplementedConfigureServer
// for forward compatibility
type ConfigureServer interface {
	GetConfigure(context.Context, *GetConfigureRequest) (*GetConfigureReply, error)
	UpdateConfigure(context.Context, *UpdateConfigureRequest) (*UpdateConfigureReply, error)
	CompareConfigure(context.Context, *CompareConfigureRequest) (*CompareConfigureReply, error)
	WatchConfigure(*WatchConfigureRequest, Configure_WatchConfigureServer) error
	mustEmbedUnimplementedConfigureServer()
}

// UnimplementedConfigureServer must be embedded to have forward compatible implementations.
type UnimplementedConfigureServer struct {
}

func (UnimplementedConfigureServer) GetConfigure(context.Context, *GetConfigureRequest) (*GetConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigure not implemented")
}
func (UnimplementedConfigureServer) UpdateConfigure(context.Context, *UpdateConfigureRequest) (*UpdateConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigure not implemented")
}
func (UnimplementedConfigureServer) CompareConfigure(context.Context, *CompareConfigureRequest) (*CompareConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareConfigure not implemented")
}
func (UnimplementedConfigureServer) WatchConfigure(*WatchConfigureRequest, Configure_WatchConfigureServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConfigure not implemented")
}
func (UnimplementedConfigureServer) mustEmbedUnimplementedConfigureServer() {}

// UnsafeConfigureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigureServer will
// result in compilation errors.
type UnsafeConfigureServer interface {
	mustEmbedUnimplementedConfigureServer()
}

func RegisterConfigureServer(s grpc.ServiceRegistrar, srv ConfigureServer) {
	s.RegisterService(&Configure_ServiceDesc, srv)
}

func _Configure_GetConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).GetConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_GetConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).GetConfigure(ctx, req.(*GetConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_UpdateConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).UpdateConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_UpdateConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).UpdateConfigure(ctx, req.(*UpdateConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_CompareConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).CompareConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_CompareConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).CompareConfigure(ctx, req.(*CompareConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_WatchConfigure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConfigureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigureServer).WatchConfigure(m, &configureWatchConfigureServer{stream})
}

type Configure_WatchConfigureServer interface {
	Send(*WatchConfigureReply) error
	grpc.ServerStream
}

type configureWatchConfigureServer struct {
	grpc.ServerStream
}

func (x *configureWatchConfigureServer) Send(m *WatchConfigureReply) error {
	return x.ServerStream.SendMsg(m)
}

// Configure_ServiceDesc is the grpc.ServiceDesc for Configure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configure.api.configure.configure.v1.Configure",
	HandlerType: (*ConfigureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigure",
			Handler:    _Configure_GetConfigure_Handler,
		},
		{
			MethodName: "UpdateConfigure",
			Handler:    _Configure_UpdateConfigure_Handler,
		},
		{
			MethodName: "CompareConfigure",
			Handler:    _Configure_CompareConfigure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConfigure",
			Handler:       _Configure_WatchConfigure_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/configure/configure/configure_configure_service.proto",
}
