// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/configure/server/configure_server_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServerCreateServer = "/configure.api.configure.server.v1.Server/CreateServer"
const OperationServerDeleteServer = "/configure.api.configure.server.v1.Server/DeleteServer"
const OperationServerListServer = "/configure.api.configure.server.v1.Server/ListServer"
const OperationServerUpdateServer = "/configure.api.configure.server.v1.Server/UpdateServer"

type ServerHTTPServer interface {
	// CreateServer CreateServer 创建服务信息
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerReply, error)
	// DeleteServer DeleteServer 删除服务信息
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerReply, error)
	// ListServer ListServer 获取服务信息列表
	ListServer(context.Context, *ListServerRequest) (*ListServerReply, error)
	// UpdateServer UpdateServer 更新服务信息
	UpdateServer(context.Context, *UpdateServerRequest) (*UpdateServerReply, error)
}

func RegisterServerHTTPServer(s *http.Server, srv ServerHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/api/v1/servers", _Server_ListServer0_HTTP_Handler(srv))
	r.POST("/configure/api/v1/server", _Server_CreateServer0_HTTP_Handler(srv))
	r.PUT("/configure/api/v1/server", _Server_UpdateServer0_HTTP_Handler(srv))
	r.DELETE("/configure/api/v1/server", _Server_DeleteServer0_HTTP_Handler(srv))
}

func _Server_ListServer0_HTTP_Handler(srv ServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerListServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListServer(ctx, req.(*ListServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListServerReply)
		return ctx.Result(200, reply)
	}
}

func _Server_CreateServer0_HTTP_Handler(srv ServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerCreateServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateServer(ctx, req.(*CreateServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateServerReply)
		return ctx.Result(200, reply)
	}
}

func _Server_UpdateServer0_HTTP_Handler(srv ServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerUpdateServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateServer(ctx, req.(*UpdateServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateServerReply)
		return ctx.Result(200, reply)
	}
}

func _Server_DeleteServer0_HTTP_Handler(srv ServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServerDeleteServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteServer(ctx, req.(*DeleteServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteServerReply)
		return ctx.Result(200, reply)
	}
}

type ServerHTTPClient interface {
	CreateServer(ctx context.Context, req *CreateServerRequest, opts ...http.CallOption) (rsp *CreateServerReply, err error)
	DeleteServer(ctx context.Context, req *DeleteServerRequest, opts ...http.CallOption) (rsp *DeleteServerReply, err error)
	ListServer(ctx context.Context, req *ListServerRequest, opts ...http.CallOption) (rsp *ListServerReply, err error)
	UpdateServer(ctx context.Context, req *UpdateServerRequest, opts ...http.CallOption) (rsp *UpdateServerReply, err error)
}

type ServerHTTPClientImpl struct {
	cc *http.Client
}

func NewServerHTTPClient(client *http.Client) ServerHTTPClient {
	return &ServerHTTPClientImpl{client}
}

func (c *ServerHTTPClientImpl) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...http.CallOption) (*CreateServerReply, error) {
	var out CreateServerReply
	pattern := "/configure/api/v1/server"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServerCreateServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServerHTTPClientImpl) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...http.CallOption) (*DeleteServerReply, error) {
	var out DeleteServerReply
	pattern := "/configure/api/v1/server"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServerDeleteServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServerHTTPClientImpl) ListServer(ctx context.Context, in *ListServerRequest, opts ...http.CallOption) (*ListServerReply, error) {
	var out ListServerReply
	pattern := "/configure/api/v1/servers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServerListServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServerHTTPClientImpl) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...http.CallOption) (*UpdateServerReply, error) {
	var out UpdateServerReply
	pattern := "/configure/api/v1/server"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServerUpdateServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
