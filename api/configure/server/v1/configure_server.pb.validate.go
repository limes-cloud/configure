// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/configure/server/configure_server.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListServerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServerRequestMultiError, or nil if none found.
func (m *ListServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListServerRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListServerRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListServerRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListServerRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListServerRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListServerRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListServerRequestMultiError(errors)
	}

	return nil
}

// ListServerRequestMultiError is an error wrapping multiple validation errors
// returned by ListServerRequest.ValidateAll() if the designated constraints
// aren't met.
type ListServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServerRequestMultiError) AllErrors() []error { return m }

// ListServerRequestValidationError is the validation error returned by
// ListServerRequest.Validate if the designated constraints aren't met.
type ListServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServerRequestValidationError) ErrorName() string {
	return "ListServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServerRequestValidationError{}

var _ListServerRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListServerRequest_OrderBy_InLookup = map[string]struct{}{
	"id": {},
}

// Validate checks the field values on ListServerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServerReplyMultiError, or nil if none found.
func (m *ListServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServerReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServerReplyMultiError(errors)
	}

	return nil
}

// ListServerReplyMultiError is an error wrapping multiple validation errors
// returned by ListServerReply.ValidateAll() if the designated constraints
// aren't met.
type ListServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServerReplyMultiError) AllErrors() []error { return m }

// ListServerReplyValidationError is the validation error returned by
// ListServerReply.Validate if the designated constraints aren't met.
type ListServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServerReplyValidationError) ErrorName() string { return "ListServerReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServerReplyValidationError{}

// Validate checks the field values on CreateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServerRequestMultiError, or nil if none found.
func (m *CreateServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateServerRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateServerRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return CreateServerRequestMultiError(errors)
	}

	return nil
}

// CreateServerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServerRequestMultiError) AllErrors() []error { return m }

// CreateServerRequestValidationError is the validation error returned by
// CreateServerRequest.Validate if the designated constraints aren't met.
type CreateServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServerRequestValidationError) ErrorName() string {
	return "CreateServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServerRequestValidationError{}

// Validate checks the field values on CreateServerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServerReplyMultiError, or nil if none found.
func (m *CreateServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateServerReplyMultiError(errors)
	}

	return nil
}

// CreateServerReplyMultiError is an error wrapping multiple validation errors
// returned by CreateServerReply.ValidateAll() if the designated constraints
// aren't met.
type CreateServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServerReplyMultiError) AllErrors() []error { return m }

// CreateServerReplyValidationError is the validation error returned by
// CreateServerReply.Validate if the designated constraints aren't met.
type CreateServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServerReplyValidationError) ErrorName() string {
	return "CreateServerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServerReplyValidationError{}

// Validate checks the field values on UpdateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerRequestMultiError, or nil if none found.
func (m *UpdateServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateServerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Name

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateServerRequestMultiError(errors)
	}

	return nil
}

// UpdateServerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerRequestMultiError) AllErrors() []error { return m }

// UpdateServerRequestValidationError is the validation error returned by
// UpdateServerRequest.Validate if the designated constraints aren't met.
type UpdateServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerRequestValidationError) ErrorName() string {
	return "UpdateServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerRequestValidationError{}

// Validate checks the field values on UpdateServerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerReplyMultiError, or nil if none found.
func (m *UpdateServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServerReplyMultiError(errors)
	}

	return nil
}

// UpdateServerReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateServerReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerReplyMultiError) AllErrors() []error { return m }

// UpdateServerReplyValidationError is the validation error returned by
// UpdateServerReply.Validate if the designated constraints aren't met.
type UpdateServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerReplyValidationError) ErrorName() string {
	return "UpdateServerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerReplyValidationError{}

// Validate checks the field values on DeleteServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerRequestMultiError, or nil if none found.
func (m *DeleteServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteServerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServerRequestMultiError(errors)
	}

	return nil
}

// DeleteServerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerRequestMultiError) AllErrors() []error { return m }

// DeleteServerRequestValidationError is the validation error returned by
// DeleteServerRequest.Validate if the designated constraints aren't met.
type DeleteServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerRequestValidationError) ErrorName() string {
	return "DeleteServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerRequestValidationError{}

// Validate checks the field values on DeleteServerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerReplyMultiError, or nil if none found.
func (m *DeleteServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServerReplyMultiError(errors)
	}

	return nil
}

// DeleteServerReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteServerReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerReplyMultiError) AllErrors() []error { return m }

// DeleteServerReplyValidationError is the validation error returned by
// DeleteServerReply.Validate if the designated constraints aren't met.
type DeleteServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerReplyValidationError) ErrorName() string {
	return "DeleteServerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerReplyValidationError{}

// Validate checks the field values on ListServerReply_Server with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServerReply_Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServerReply_Server with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServerReply_ServerMultiError, or nil if none found.
func (m *ListServerReply_Server) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServerReply_Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return ListServerReply_ServerMultiError(errors)
	}

	return nil
}

// ListServerReply_ServerMultiError is an error wrapping multiple validation
// errors returned by ListServerReply_Server.ValidateAll() if the designated
// constraints aren't met.
type ListServerReply_ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServerReply_ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServerReply_ServerMultiError) AllErrors() []error { return m }

// ListServerReply_ServerValidationError is the validation error returned by
// ListServerReply_Server.Validate if the designated constraints aren't met.
type ListServerReply_ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServerReply_ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServerReply_ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServerReply_ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServerReply_ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServerReply_ServerValidationError) ErrorName() string {
	return "ListServerReply_ServerValidationError"
}

// Error satisfies the builtin error interface
func (e ListServerReply_ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServerReply_Server.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServerReply_ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServerReply_ServerValidationError{}
