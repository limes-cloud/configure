// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v4.24.4
// source: api/configure/business/configure_business_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBusinessCreateBusiness = "/configure.api.configure.business.v1.Business/CreateBusiness"
const OperationBusinessDeleteBusiness = "/configure.api.configure.business.v1.Business/DeleteBusiness"
const OperationBusinessListBusiness = "/configure.api.configure.business.v1.Business/ListBusiness"
const OperationBusinessListBusinessValue = "/configure.api.configure.business.v1.Business/ListBusinessValue"
const OperationBusinessUpdateBusiness = "/configure.api.configure.business.v1.Business/UpdateBusiness"
const OperationBusinessUpdateBusinessValue = "/configure.api.configure.business.v1.Business/UpdateBusinessValue"

type BusinessHTTPServer interface {
	// CreateBusiness CreateBusiness 创建业务配置信息
	CreateBusiness(context.Context, *CreateBusinessRequest) (*CreateBusinessReply, error)
	// DeleteBusiness DeleteBusiness 删除业务配置信息
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessReply, error)
	// ListBusiness ListBusiness 获取业务配置信息列表
	ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessReply, error)
	// ListBusinessValue ListBusinessValue 获取业务配置值信息列表
	ListBusinessValue(context.Context, *ListBusinessValueRequest) (*ListBusinessValueReply, error)
	// UpdateBusiness UpdateBusiness 更新业务配置信息
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessReply, error)
	// UpdateBusinessValue UpdateBusinessValue 更新业务配置值信息
	UpdateBusinessValue(context.Context, *UpdateBusinessValueRequest) (*UpdateBusinessValueReply, error)
}

func RegisterBusinessHTTPServer(s *http.Server, srv BusinessHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/api/v1/businesses", _Business_ListBusiness0_HTTP_Handler(srv))
	r.POST("/configure/api/v1/business", _Business_CreateBusiness0_HTTP_Handler(srv))
	r.PUT("/configure/api/v1/business", _Business_UpdateBusiness0_HTTP_Handler(srv))
	r.DELETE("/configure/api/v1/business", _Business_DeleteBusiness0_HTTP_Handler(srv))
	r.GET("/configure/api/v1/business/values", _Business_ListBusinessValue0_HTTP_Handler(srv))
	r.PUT("/configure/api/v1/business/values", _Business_UpdateBusinessValue0_HTTP_Handler(srv))
}

func _Business_ListBusiness0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBusinessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessListBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListBusiness(ctx, req.(*ListBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBusinessReply)
		return ctx.Result(200, reply)
	}
}

func _Business_CreateBusiness0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBusinessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessCreateBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CreateBusiness(ctx, req.(*CreateBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateBusinessReply)
		return ctx.Result(200, reply)
	}
}

func _Business_UpdateBusiness0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBusinessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessUpdateBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBusinessReply)
		return ctx.Result(200, reply)
	}
}

func _Business_DeleteBusiness0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBusinessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessDeleteBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBusinessReply)
		return ctx.Result(200, reply)
	}
}

func _Business_ListBusinessValue0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBusinessValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessListBusinessValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListBusinessValue(ctx, req.(*ListBusinessValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBusinessValueReply)
		return ctx.Result(200, reply)
	}
}

func _Business_UpdateBusinessValue0_HTTP_Handler(srv BusinessHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBusinessValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBusinessUpdateBusinessValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBusinessValue(ctx, req.(*UpdateBusinessValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateBusinessValueReply)
		return ctx.Result(200, reply)
	}
}

type BusinessHTTPClient interface {
	CreateBusiness(ctx context.Context, req *CreateBusinessRequest, opts ...http.CallOption) (rsp *CreateBusinessReply, err error)
	DeleteBusiness(ctx context.Context, req *DeleteBusinessRequest, opts ...http.CallOption) (rsp *DeleteBusinessReply, err error)
	ListBusiness(ctx context.Context, req *ListBusinessRequest, opts ...http.CallOption) (rsp *ListBusinessReply, err error)
	ListBusinessValue(ctx context.Context, req *ListBusinessValueRequest, opts ...http.CallOption) (rsp *ListBusinessValueReply, err error)
	UpdateBusiness(ctx context.Context, req *UpdateBusinessRequest, opts ...http.CallOption) (rsp *UpdateBusinessReply, err error)
	UpdateBusinessValue(ctx context.Context, req *UpdateBusinessValueRequest, opts ...http.CallOption) (rsp *UpdateBusinessValueReply, err error)
}

type BusinessHTTPClientImpl struct {
	cc *http.Client
}

func NewBusinessHTTPClient(client *http.Client) BusinessHTTPClient {
	return &BusinessHTTPClientImpl{client}
}

func (c *BusinessHTTPClientImpl) CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...http.CallOption) (*CreateBusinessReply, error) {
	var out CreateBusinessReply
	pattern := "/configure/api/v1/business"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessCreateBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BusinessHTTPClientImpl) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...http.CallOption) (*DeleteBusinessReply, error) {
	var out DeleteBusinessReply
	pattern := "/configure/api/v1/business"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessDeleteBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BusinessHTTPClientImpl) ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...http.CallOption) (*ListBusinessReply, error) {
	var out ListBusinessReply
	pattern := "/configure/api/v1/businesses"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessListBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BusinessHTTPClientImpl) ListBusinessValue(ctx context.Context, in *ListBusinessValueRequest, opts ...http.CallOption) (*ListBusinessValueReply, error) {
	var out ListBusinessValueReply
	pattern := "/configure/api/v1/business/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBusinessListBusinessValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BusinessHTTPClientImpl) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...http.CallOption) (*UpdateBusinessReply, error) {
	var out UpdateBusinessReply
	pattern := "/configure/api/v1/business"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessUpdateBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BusinessHTTPClientImpl) UpdateBusinessValue(ctx context.Context, in *UpdateBusinessValueRequest, opts ...http.CallOption) (*UpdateBusinessValueReply, error) {
	var out UpdateBusinessValueReply
	pattern := "/configure/api/v1/business/values"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBusinessUpdateBusinessValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
