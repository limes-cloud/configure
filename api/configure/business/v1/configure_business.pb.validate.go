// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/configure/business/configure_business.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessRequestMultiError, or nil if none found.
func (m *ListBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListBusinessRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := ListBusinessRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := ListBusinessRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Order != nil {

		if _, ok := _ListBusinessRequest_Order_InLookup[m.GetOrder()]; !ok {
			err := ListBusinessRequestValidationError{
				field:  "Order",
				reason: "value must be in list [asc desc]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OrderBy != nil {

		if _, ok := _ListBusinessRequest_OrderBy_InLookup[m.GetOrderBy()]; !ok {
			err := ListBusinessRequestValidationError{
				field:  "OrderBy",
				reason: "value must be in list [id]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if len(errors) > 0 {
		return ListBusinessRequestMultiError(errors)
	}

	return nil
}

// ListBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by ListBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessRequestMultiError) AllErrors() []error { return m }

// ListBusinessRequestValidationError is the validation error returned by
// ListBusinessRequest.Validate if the designated constraints aren't met.
type ListBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessRequestValidationError) ErrorName() string {
	return "ListBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessRequestValidationError{}

var _ListBusinessRequest_Order_InLookup = map[string]struct{}{
	"asc":  {},
	"desc": {},
}

var _ListBusinessRequest_OrderBy_InLookup = map[string]struct{}{
	"id": {},
}

// Validate checks the field values on ListBusinessReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessReplyMultiError, or nil if none found.
func (m *ListBusinessReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBusinessReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBusinessReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBusinessReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBusinessReplyMultiError(errors)
	}

	return nil
}

// ListBusinessReplyMultiError is an error wrapping multiple validation errors
// returned by ListBusinessReply.ValidateAll() if the designated constraints
// aren't met.
type ListBusinessReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessReplyMultiError) AllErrors() []error { return m }

// ListBusinessReplyValidationError is the validation error returned by
// ListBusinessReply.Validate if the designated constraints aren't met.
type ListBusinessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessReplyValidationError) ErrorName() string {
	return "ListBusinessReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessReplyValidationError{}

// Validate checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessRequestMultiError, or nil if none found.
func (m *CreateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := CreateBusinessRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := CreateBusinessRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := CreateBusinessRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return CreateBusinessRequestMultiError(errors)
	}

	return nil
}

// CreateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessRequestMultiError) AllErrors() []error { return m }

// CreateBusinessRequestValidationError is the validation error returned by
// CreateBusinessRequest.Validate if the designated constraints aren't met.
type CreateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessRequestValidationError) ErrorName() string {
	return "CreateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessRequestValidationError{}

// Validate checks the field values on CreateBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBusinessReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBusinessReplyMultiError, or nil if none found.
func (m *CreateBusinessReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBusinessReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateBusinessReplyMultiError(errors)
	}

	return nil
}

// CreateBusinessReplyMultiError is an error wrapping multiple validation
// errors returned by CreateBusinessReply.ValidateAll() if the designated
// constraints aren't met.
type CreateBusinessReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBusinessReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBusinessReplyMultiError) AllErrors() []error { return m }

// CreateBusinessReplyValidationError is the validation error returned by
// CreateBusinessReply.Validate if the designated constraints aren't met.
type CreateBusinessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessReplyValidationError) ErrorName() string {
	return "CreateBusinessReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessReplyValidationError{}

// Validate checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessRequestMultiError, or nil if none found.
func (m *UpdateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateBusinessRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKeyword()) < 1 {
		err := UpdateBusinessRequestValidationError{
			field:  "Keyword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := UpdateBusinessRequestValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateBusinessRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessRequestValidationError is the validation error returned by
// UpdateBusinessRequest.Validate if the designated constraints aren't met.
type UpdateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessRequestValidationError) ErrorName() string {
	return "UpdateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessRequestValidationError{}

// Validate checks the field values on UpdateBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessReplyMultiError, or nil if none found.
func (m *UpdateBusinessReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateBusinessReplyMultiError(errors)
	}

	return nil
}

// UpdateBusinessReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessReplyMultiError) AllErrors() []error { return m }

// UpdateBusinessReplyValidationError is the validation error returned by
// UpdateBusinessReply.Validate if the designated constraints aren't met.
type UpdateBusinessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessReplyValidationError) ErrorName() string {
	return "UpdateBusinessReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessReplyValidationError{}

// Validate checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessRequestMultiError, or nil if none found.
func (m *DeleteBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteBusinessRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBusinessRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessRequestValidationError is the validation error returned by
// DeleteBusinessRequest.Validate if the designated constraints aren't met.
type DeleteBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessRequestValidationError) ErrorName() string {
	return "DeleteBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessRequestValidationError{}

// Validate checks the field values on DeleteBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessReplyMultiError, or nil if none found.
func (m *DeleteBusinessReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteBusinessReplyMultiError(errors)
	}

	return nil
}

// DeleteBusinessReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessReplyMultiError) AllErrors() []error { return m }

// DeleteBusinessReplyValidationError is the validation error returned by
// DeleteBusinessReply.Validate if the designated constraints aren't met.
type DeleteBusinessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessReplyValidationError) ErrorName() string {
	return "DeleteBusinessReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessReplyValidationError{}

// Validate checks the field values on ListBusinessReply_Business with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBusinessReply_Business) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBusinessReply_Business with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBusinessReply_BusinessMultiError, or nil if none found.
func (m *ListBusinessReply_Business) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBusinessReply_Business) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Keyword

	// no validation rules for Type

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return ListBusinessReply_BusinessMultiError(errors)
	}

	return nil
}

// ListBusinessReply_BusinessMultiError is an error wrapping multiple
// validation errors returned by ListBusinessReply_Business.ValidateAll() if
// the designated constraints aren't met.
type ListBusinessReply_BusinessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBusinessReply_BusinessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBusinessReply_BusinessMultiError) AllErrors() []error { return m }

// ListBusinessReply_BusinessValidationError is the validation error returned
// by ListBusinessReply_Business.Validate if the designated constraints aren't met.
type ListBusinessReply_BusinessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBusinessReply_BusinessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBusinessReply_BusinessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBusinessReply_BusinessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBusinessReply_BusinessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBusinessReply_BusinessValidationError) ErrorName() string {
	return "ListBusinessReply_BusinessValidationError"
}

// Error satisfies the builtin error interface
func (e ListBusinessReply_BusinessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBusinessReply_Business.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBusinessReply_BusinessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBusinessReply_BusinessValidationError{}
