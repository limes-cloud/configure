// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/configure/business/configure_business_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Business_ListBusiness_FullMethodName        = "/configure.api.configure.business.v1.Business/ListBusiness"
	Business_CreateBusiness_FullMethodName      = "/configure.api.configure.business.v1.Business/CreateBusiness"
	Business_UpdateBusiness_FullMethodName      = "/configure.api.configure.business.v1.Business/UpdateBusiness"
	Business_DeleteBusiness_FullMethodName      = "/configure.api.configure.business.v1.Business/DeleteBusiness"
	Business_ListBusinessValue_FullMethodName   = "/configure.api.configure.business.v1.Business/ListBusinessValue"
	Business_UpdateBusinessValue_FullMethodName = "/configure.api.configure.business.v1.Business/UpdateBusinessValue"
)

// BusinessClient is the client API for Business service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessClient interface {
	// ListBusiness 获取业务配置信息列表
	ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessReply, error)
	// CreateBusiness 创建业务配置信息
	CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessReply, error)
	// UpdateBusiness 更新业务配置信息
	UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessReply, error)
	// DeleteBusiness 删除业务配置信息
	DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessReply, error)
	// ListBusinessValue 获取业务配置值信息列表
	ListBusinessValue(ctx context.Context, in *ListBusinessValueRequest, opts ...grpc.CallOption) (*ListBusinessValueReply, error)
	// UpdateBusinessValue 更新业务配置值信息
	UpdateBusinessValue(ctx context.Context, in *UpdateBusinessValueRequest, opts ...grpc.CallOption) (*UpdateBusinessValueReply, error)
}

type businessClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessClient(cc grpc.ClientConnInterface) BusinessClient {
	return &businessClient{cc}
}

func (c *businessClient) ListBusiness(ctx context.Context, in *ListBusinessRequest, opts ...grpc.CallOption) (*ListBusinessReply, error) {
	out := new(ListBusinessReply)
	err := c.cc.Invoke(ctx, Business_ListBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) CreateBusiness(ctx context.Context, in *CreateBusinessRequest, opts ...grpc.CallOption) (*CreateBusinessReply, error) {
	out := new(CreateBusinessReply)
	err := c.cc.Invoke(ctx, Business_CreateBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*UpdateBusinessReply, error) {
	out := new(UpdateBusinessReply)
	err := c.cc.Invoke(ctx, Business_UpdateBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*DeleteBusinessReply, error) {
	out := new(DeleteBusinessReply)
	err := c.cc.Invoke(ctx, Business_DeleteBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) ListBusinessValue(ctx context.Context, in *ListBusinessValueRequest, opts ...grpc.CallOption) (*ListBusinessValueReply, error) {
	out := new(ListBusinessValueReply)
	err := c.cc.Invoke(ctx, Business_ListBusinessValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessClient) UpdateBusinessValue(ctx context.Context, in *UpdateBusinessValueRequest, opts ...grpc.CallOption) (*UpdateBusinessValueReply, error) {
	out := new(UpdateBusinessValueReply)
	err := c.cc.Invoke(ctx, Business_UpdateBusinessValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessServer is the server API for Business service.
// All implementations must embed UnimplementedBusinessServer
// for forward compatibility
type BusinessServer interface {
	// ListBusiness 获取业务配置信息列表
	ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessReply, error)
	// CreateBusiness 创建业务配置信息
	CreateBusiness(context.Context, *CreateBusinessRequest) (*CreateBusinessReply, error)
	// UpdateBusiness 更新业务配置信息
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessReply, error)
	// DeleteBusiness 删除业务配置信息
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessReply, error)
	// ListBusinessValue 获取业务配置值信息列表
	ListBusinessValue(context.Context, *ListBusinessValueRequest) (*ListBusinessValueReply, error)
	// UpdateBusinessValue 更新业务配置值信息
	UpdateBusinessValue(context.Context, *UpdateBusinessValueRequest) (*UpdateBusinessValueReply, error)
	mustEmbedUnimplementedBusinessServer()
}

// UnimplementedBusinessServer must be embedded to have forward compatible implementations.
type UnimplementedBusinessServer struct {
}

func (UnimplementedBusinessServer) ListBusiness(context.Context, *ListBusinessRequest) (*ListBusinessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusiness not implemented")
}
func (UnimplementedBusinessServer) CreateBusiness(context.Context, *CreateBusinessRequest) (*CreateBusinessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBusiness not implemented")
}
func (UnimplementedBusinessServer) UpdateBusiness(context.Context, *UpdateBusinessRequest) (*UpdateBusinessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (UnimplementedBusinessServer) DeleteBusiness(context.Context, *DeleteBusinessRequest) (*DeleteBusinessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (UnimplementedBusinessServer) ListBusinessValue(context.Context, *ListBusinessValueRequest) (*ListBusinessValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBusinessValue not implemented")
}
func (UnimplementedBusinessServer) UpdateBusinessValue(context.Context, *UpdateBusinessValueRequest) (*UpdateBusinessValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessValue not implemented")
}
func (UnimplementedBusinessServer) mustEmbedUnimplementedBusinessServer() {}

// UnsafeBusinessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessServer will
// result in compilation errors.
type UnsafeBusinessServer interface {
	mustEmbedUnimplementedBusinessServer()
}

func RegisterBusinessServer(s grpc.ServiceRegistrar, srv BusinessServer) {
	s.RegisterService(&Business_ServiceDesc, srv)
}

func _Business_ListBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).ListBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_ListBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).ListBusiness(ctx, req.(*ListBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_CreateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).CreateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_CreateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).CreateBusiness(ctx, req.(*CreateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_UpdateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_DeleteBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_ListBusinessValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBusinessValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).ListBusinessValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_ListBusinessValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).ListBusinessValue(ctx, req.(*ListBusinessValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Business_UpdateBusinessValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessServer).UpdateBusinessValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Business_UpdateBusinessValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessServer).UpdateBusinessValue(ctx, req.(*UpdateBusinessValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Business_ServiceDesc is the grpc.ServiceDesc for Business service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Business_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configure.api.configure.business.v1.Business",
	HandlerType: (*BusinessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBusiness",
			Handler:    _Business_ListBusiness_Handler,
		},
		{
			MethodName: "CreateBusiness",
			Handler:    _Business_CreateBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _Business_UpdateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _Business_DeleteBusiness_Handler,
		},
		{
			MethodName: "ListBusinessValue",
			Handler:    _Business_ListBusinessValue_Handler,
		},
		{
			MethodName: "UpdateBusinessValue",
			Handler:    _Business_UpdateBusinessValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/configure/business/configure_business_service.proto",
}
