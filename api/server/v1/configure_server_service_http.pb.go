// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: configure_server_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddServer = "/configure_server.Service/AddServer"
const OperationServiceDeleteServer = "/configure_server.Service/DeleteServer"
const OperationServiceGetServer = "/configure_server.Service/GetServer"
const OperationServicePageServer = "/configure_server.Service/PageServer"
const OperationServiceUpdateServer = "/configure_server.Service/UpdateServer"

type ServiceHTTPServer interface {
	AddServer(context.Context, *AddServerRequest) (*AddServerReply, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error)
	GetServer(context.Context, *GetServerRequest) (*Server, error)
	PageServer(context.Context, *PageServerRequest) (*PageServerReply, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/v1/servers", _Service_PageServer0_HTTP_Handler(srv))
	r.GET("/configure/v1/server", _Service_GetServer0_HTTP_Handler(srv))
	r.POST("/configure/v1/server", _Service_AddServer0_HTTP_Handler(srv))
	r.PUT("/configure/v1/server", _Service_UpdateServer0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/server", _Service_DeleteServer0_HTTP_Handler(srv))
}

func _Service_PageServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageServer(ctx, req.(*PageServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageServerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetServer(ctx, req.(*GetServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Server)
		return ctx.Result(200, reply)
	}
}

func _Service_AddServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddServer(ctx, req.(*AddServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddServerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateServer(ctx, req.(*UpdateServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteServer(ctx, req.(*DeleteServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddServer(ctx context.Context, req *AddServerRequest, opts ...http.CallOption) (rsp *AddServerReply, err error)
	DeleteServer(ctx context.Context, req *DeleteServerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetServer(ctx context.Context, req *GetServerRequest, opts ...http.CallOption) (rsp *Server, err error)
	PageServer(ctx context.Context, req *PageServerRequest, opts ...http.CallOption) (rsp *PageServerReply, err error)
	UpdateServer(ctx context.Context, req *UpdateServerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddServer(ctx context.Context, in *AddServerRequest, opts ...http.CallOption) (*AddServerReply, error) {
	var out AddServerReply
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetServer(ctx context.Context, in *GetServerRequest, opts ...http.CallOption) (*Server, error) {
	var out Server
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageServer(ctx context.Context, in *PageServerRequest, opts ...http.CallOption) (*PageServerReply, error) {
	var out PageServerReply
	pattern := "/configure/v1/servers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
