// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: configure_env_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddEnv = "/configure_env.Service/AddEnv"
const OperationServiceAllEnv = "/configure_env.Service/AllEnv"
const OperationServiceDeleteEnv = "/configure_env.Service/DeleteEnv"
const OperationServiceGetEnvToken = "/configure_env.Service/GetEnvToken"
const OperationServiceResetEnvToken = "/configure_env.Service/ResetEnvToken"
const OperationServiceUpdateEnv = "/configure_env.Service/UpdateEnv"

type ServiceHTTPServer interface {
	// AddEnv AddEnv 添加环境
	AddEnv(context.Context, *AddEnvRequest) (*AddEnvReply, error)
	// AllEnv AllEnv 获取全部环境
	AllEnv(context.Context, *emptypb.Empty) (*AllEnvReply, error)
	// DeleteEnv DeleteEnv 删除环境信息
	DeleteEnv(context.Context, *DeleteEnvRequest) (*emptypb.Empty, error)
	// GetEnvToken GetEnvToken 获取环境token
	GetEnvToken(context.Context, *GetEnvTokenRequest) (*GetEnvTokenReply, error)
	// ResetEnvToken ResetEnvToken 重置环境token
	ResetEnvToken(context.Context, *ResetEnvTokenRequest) (*ResetEnvTokenReply, error)
	// UpdateEnv UpdateEnv 更新环境信息
	UpdateEnv(context.Context, *UpdateEnvRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/v1/envs", _Service_AllEnv0_HTTP_Handler(srv))
	r.POST("/configure/v1/env", _Service_AddEnv0_HTTP_Handler(srv))
	r.PUT("/configure/v1/env", _Service_UpdateEnv0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/env", _Service_DeleteEnv0_HTTP_Handler(srv))
	r.GET("/configure/v1/env/token", _Service_GetEnvToken0_HTTP_Handler(srv))
	r.PUT("/configure/v1/env/token", _Service_ResetEnvToken0_HTTP_Handler(srv))
}

func _Service_AllEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllEnv(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddEnvRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddEnv(ctx, req.(*AddEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEnvRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateEnv(ctx, req.(*UpdateEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEnvRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteEnv(ctx, req.(*DeleteEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_GetEnvToken0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEnvTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetEnvToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetEnvToken(ctx, req.(*GetEnvTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEnvTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ResetEnvToken0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetEnvTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceResetEnvToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ResetEnvToken(ctx, req.(*ResetEnvTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetEnvTokenReply)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddEnv(ctx context.Context, req *AddEnvRequest, opts ...http.CallOption) (rsp *AddEnvReply, err error)
	AllEnv(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllEnvReply, err error)
	DeleteEnv(ctx context.Context, req *DeleteEnvRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetEnvToken(ctx context.Context, req *GetEnvTokenRequest, opts ...http.CallOption) (rsp *GetEnvTokenReply, err error)
	ResetEnvToken(ctx context.Context, req *ResetEnvTokenRequest, opts ...http.CallOption) (rsp *ResetEnvTokenReply, err error)
	UpdateEnv(ctx context.Context, req *UpdateEnvRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddEnv(ctx context.Context, in *AddEnvRequest, opts ...http.CallOption) (*AddEnvReply, error) {
	var out AddEnvReply
	pattern := "/configure/v1/env"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllEnv(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllEnvReply, error) {
	var out AllEnvReply
	pattern := "/configure/v1/envs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/env"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetEnvToken(ctx context.Context, in *GetEnvTokenRequest, opts ...http.CallOption) (*GetEnvTokenReply, error) {
	var out GetEnvTokenReply
	pattern := "/configure/v1/env/token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetEnvToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ResetEnvToken(ctx context.Context, in *ResetEnvTokenRequest, opts ...http.CallOption) (*ResetEnvTokenReply, error) {
	var out ResetEnvTokenReply
	pattern := "/configure/v1/env/token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceResetEnvToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/env"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
