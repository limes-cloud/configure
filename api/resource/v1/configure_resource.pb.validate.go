// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: configure_resource.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Description

	// no validation rules for Fields

	// no validation rules for Tag

	// no validation rules for Private

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on PageResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageResourceRequestMultiError, or nil if none found.
func (m *PageResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageResourceRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageResourceRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ServerId != nil {
		// no validation rules for ServerId
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Tag != nil {
		// no validation rules for Tag
	}

	if len(errors) > 0 {
		return PageResourceRequestMultiError(errors)
	}

	return nil
}

// PageResourceRequestMultiError is an error wrapping multiple validation
// errors returned by PageResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type PageResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageResourceRequestMultiError) AllErrors() []error { return m }

// PageResourceRequestValidationError is the validation error returned by
// PageResourceRequest.Validate if the designated constraints aren't met.
type PageResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResourceRequestValidationError) ErrorName() string {
	return "PageResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResourceRequestValidationError{}

// Validate checks the field values on PageResourceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageResourceReplyMultiError, or nil if none found.
func (m *PageResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageResourceReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageResourceReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageResourceReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageResourceReplyMultiError(errors)
	}

	return nil
}

// PageResourceReplyMultiError is an error wrapping multiple validation errors
// returned by PageResourceReply.ValidateAll() if the designated constraints
// aren't met.
type PageResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageResourceReplyMultiError) AllErrors() []error { return m }

// PageResourceReplyValidationError is the validation error returned by
// PageResourceReply.Validate if the designated constraints aren't met.
type PageResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageResourceReplyValidationError) ErrorName() string {
	return "PageResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageResourceReplyValidationError{}

// Validate checks the field values on AddResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceRequestMultiError, or nil if none found.
func (m *AddResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := AddResourceRequestValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := AddResourceRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTag()); l < 1 || l > 32 {
		err := AddResourceRequestValidationError{
			field:  "Tag",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Fields

	if m.Private != nil {
		// no validation rules for Private
	}

	if len(errors) > 0 {
		return AddResourceRequestMultiError(errors)
	}

	return nil
}

// AddResourceRequestMultiError is an error wrapping multiple validation errors
// returned by AddResourceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceRequestMultiError) AllErrors() []error { return m }

// AddResourceRequestValidationError is the validation error returned by
// AddResourceRequest.Validate if the designated constraints aren't met.
type AddResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceRequestValidationError) ErrorName() string {
	return "AddResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceRequestValidationError{}

// Validate checks the field values on AddResourceReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceReplyMultiError, or nil if none found.
func (m *AddResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddResourceReplyMultiError(errors)
	}

	return nil
}

// AddResourceReplyMultiError is an error wrapping multiple validation errors
// returned by AddResourceReply.ValidateAll() if the designated constraints
// aren't met.
type AddResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceReplyMultiError) AllErrors() []error { return m }

// AddResourceReplyValidationError is the validation error returned by
// AddResourceReply.Validate if the designated constraints aren't met.
type AddResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceReplyValidationError) ErrorName() string { return "AddResourceReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceReplyValidationError{}

// Validate checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceRequestMultiError, or nil if none found.
func (m *UpdateResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateResourceRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := UpdateResourceRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTag()); l < 1 || l > 32 {
		err := UpdateResourceRequestValidationError{
			field:  "Tag",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Fields

	if m.Private != nil {
		// no validation rules for Private
	}

	if len(errors) > 0 {
		return UpdateResourceRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceRequestMultiError) AllErrors() []error { return m }

// UpdateResourceRequestValidationError is the validation error returned by
// UpdateResourceRequest.Validate if the designated constraints aren't met.
type UpdateResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceRequestValidationError) ErrorName() string {
	return "UpdateResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceRequestValidationError{}

// Validate checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceRequestMultiError, or nil if none found.
func (m *DeleteResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteResourceRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteResourceRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceRequestMultiError) AllErrors() []error { return m }

// DeleteResourceRequestValidationError is the validation error returned by
// DeleteResourceRequest.Validate if the designated constraints aren't met.
type DeleteResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceRequestValidationError) ErrorName() string {
	return "DeleteResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceRequestValidationError{}

// Validate checks the field values on GetResourceServerIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceServerIdsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceServerIdsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceServerIdsRequestMultiError, or nil if none found.
func (m *GetResourceServerIdsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceServerIdsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := GetResourceServerIdsRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResourceServerIdsRequestMultiError(errors)
	}

	return nil
}

// GetResourceServerIdsRequestMultiError is an error wrapping multiple
// validation errors returned by GetResourceServerIdsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetResourceServerIdsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceServerIdsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceServerIdsRequestMultiError) AllErrors() []error { return m }

// GetResourceServerIdsRequestValidationError is the validation error returned
// by GetResourceServerIdsRequest.Validate if the designated constraints
// aren't met.
type GetResourceServerIdsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceServerIdsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceServerIdsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceServerIdsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceServerIdsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceServerIdsRequestValidationError) ErrorName() string {
	return "GetResourceServerIdsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceServerIdsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceServerIdsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceServerIdsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceServerIdsRequestValidationError{}

// Validate checks the field values on GetResourceServerIdsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceServerIdsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceServerIdsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceServerIdsReplyMultiError, or nil if none found.
func (m *GetResourceServerIdsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceServerIdsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetResourceServerIdsReplyMultiError(errors)
	}

	return nil
}

// GetResourceServerIdsReplyMultiError is an error wrapping multiple validation
// errors returned by GetResourceServerIdsReply.ValidateAll() if the
// designated constraints aren't met.
type GetResourceServerIdsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceServerIdsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceServerIdsReplyMultiError) AllErrors() []error { return m }

// GetResourceServerIdsReplyValidationError is the validation error returned by
// GetResourceServerIdsReply.Validate if the designated constraints aren't met.
type GetResourceServerIdsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceServerIdsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceServerIdsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceServerIdsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceServerIdsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceServerIdsReplyValidationError) ErrorName() string {
	return "GetResourceServerIdsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceServerIdsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceServerIdsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceServerIdsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceServerIdsReplyValidationError{}

// Validate checks the field values on GetResourceValuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceValuesRequestMultiError, or nil if none found.
func (m *GetResourceValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := GetResourceValuesRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetResourceValuesRequestMultiError(errors)
	}

	return nil
}

// GetResourceValuesRequestMultiError is an error wrapping multiple validation
// errors returned by GetResourceValuesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetResourceValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceValuesRequestMultiError) AllErrors() []error { return m }

// GetResourceValuesRequestValidationError is the validation error returned by
// GetResourceValuesRequest.Validate if the designated constraints aren't met.
type GetResourceValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceValuesRequestValidationError) ErrorName() string {
	return "GetResourceValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceValuesRequestValidationError{}

// Validate checks the field values on GetResourceValuesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetResourceValuesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceValuesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetResourceValuesReplyMultiError, or nil if none found.
func (m *GetResourceValuesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceValuesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetResourceValuesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetResourceValuesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetResourceValuesReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetResourceValuesReplyMultiError(errors)
	}

	return nil
}

// GetResourceValuesReplyMultiError is an error wrapping multiple validation
// errors returned by GetResourceValuesReply.ValidateAll() if the designated
// constraints aren't met.
type GetResourceValuesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceValuesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceValuesReplyMultiError) AllErrors() []error { return m }

// GetResourceValuesReplyValidationError is the validation error returned by
// GetResourceValuesReply.Validate if the designated constraints aren't met.
type GetResourceValuesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceValuesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceValuesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceValuesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceValuesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceValuesReplyValidationError) ErrorName() string {
	return "GetResourceValuesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceValuesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceValuesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceValuesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceValuesReplyValidationError{}

// Validate checks the field values on UpdateResourceValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceValuesRequestMultiError, or nil if none found.
func (m *UpdateResourceValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := UpdateResourceValuesRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateResourceValuesRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateResourceValuesRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateResourceValuesRequestValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateResourceValuesRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceValuesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateResourceValuesRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateResourceValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceValuesRequestMultiError) AllErrors() []error { return m }

// UpdateResourceValuesRequestValidationError is the validation error returned
// by UpdateResourceValuesRequest.Validate if the designated constraints
// aren't met.
type UpdateResourceValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceValuesRequestValidationError) ErrorName() string {
	return "UpdateResourceValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceValuesRequestValidationError{}

// Validate checks the field values on GetResourceValuesReply_ResourceValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetResourceValuesReply_ResourceValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResourceValuesReply_ResourceValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetResourceValuesReply_ResourceValueMultiError, or nil if none found.
func (m *GetResourceValuesReply_ResourceValue) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResourceValuesReply_ResourceValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnvId

	// no validation rules for ResourceId

	// no validation rules for Value

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetResourceValuesReply_ResourceValueMultiError(errors)
	}

	return nil
}

// GetResourceValuesReply_ResourceValueMultiError is an error wrapping multiple
// validation errors returned by
// GetResourceValuesReply_ResourceValue.ValidateAll() if the designated
// constraints aren't met.
type GetResourceValuesReply_ResourceValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResourceValuesReply_ResourceValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResourceValuesReply_ResourceValueMultiError) AllErrors() []error { return m }

// GetResourceValuesReply_ResourceValueValidationError is the validation error
// returned by GetResourceValuesReply_ResourceValue.Validate if the designated
// constraints aren't met.
type GetResourceValuesReply_ResourceValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourceValuesReply_ResourceValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourceValuesReply_ResourceValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourceValuesReply_ResourceValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourceValuesReply_ResourceValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourceValuesReply_ResourceValueValidationError) ErrorName() string {
	return "GetResourceValuesReply_ResourceValueValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourceValuesReply_ResourceValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourceValuesReply_ResourceValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourceValuesReply_ResourceValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourceValuesReply_ResourceValueValidationError{}

// Validate checks the field values on
// UpdateResourceValuesRequest_ResourceValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceValuesRequest_ResourceValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateResourceValuesRequest_ResourceValue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateResourceValuesRequest_ResourceValueMultiError, or nil if none found.
func (m *UpdateResourceValuesRequest_ResourceValue) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceValuesRequest_ResourceValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEnvId() <= 0 {
		err := UpdateResourceValuesRequest_ResourceValueValidationError{
			field:  "EnvId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 7 {
		err := UpdateResourceValuesRequest_ResourceValueValidationError{
			field:  "Value",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateResourceValuesRequest_ResourceValueMultiError(errors)
	}

	return nil
}

// UpdateResourceValuesRequest_ResourceValueMultiError is an error wrapping
// multiple validation errors returned by
// UpdateResourceValuesRequest_ResourceValue.ValidateAll() if the designated
// constraints aren't met.
type UpdateResourceValuesRequest_ResourceValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceValuesRequest_ResourceValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceValuesRequest_ResourceValueMultiError) AllErrors() []error { return m }

// UpdateResourceValuesRequest_ResourceValueValidationError is the validation
// error returned by UpdateResourceValuesRequest_ResourceValue.Validate if the
// designated constraints aren't met.
type UpdateResourceValuesRequest_ResourceValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceValuesRequest_ResourceValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceValuesRequest_ResourceValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceValuesRequest_ResourceValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceValuesRequest_ResourceValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceValuesRequest_ResourceValueValidationError) ErrorName() string {
	return "UpdateResourceValuesRequest_ResourceValueValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceValuesRequest_ResourceValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceValuesRequest_ResourceValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceValuesRequest_ResourceValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceValuesRequest_ResourceValueValidationError{}
