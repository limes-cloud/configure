// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: configure_resource_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_PageResource_FullMethodName         = "/configure_resource.Service/PageResource"
	Service_AddResource_FullMethodName          = "/configure_resource.Service/AddResource"
	Service_UpdateResource_FullMethodName       = "/configure_resource.Service/UpdateResource"
	Service_DeleteResource_FullMethodName       = "/configure_resource.Service/DeleteResource"
	Service_GetResourceServerIds_FullMethodName = "/configure_resource.Service/GetResourceServerIds"
	Service_GetResourceValues_FullMethodName    = "/configure_resource.Service/GetResourceValues"
	Service_UpdateResourceValues_FullMethodName = "/configure_resource.Service/UpdateResourceValues"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	PageResource(ctx context.Context, in *PageResourceRequest, opts ...grpc.CallOption) (*PageResourceReply, error)
	AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*AddResourceReply, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetResourceServerIds(ctx context.Context, in *GetResourceServerIdsRequest, opts ...grpc.CallOption) (*GetResourceServerIdsReply, error)
	GetResourceValues(ctx context.Context, in *GetResourceValuesRequest, opts ...grpc.CallOption) (*GetResourceValuesReply, error)
	UpdateResourceValues(ctx context.Context, in *UpdateResourceValuesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) PageResource(ctx context.Context, in *PageResourceRequest, opts ...grpc.CallOption) (*PageResourceReply, error) {
	out := new(PageResourceReply)
	err := c.cc.Invoke(ctx, Service_PageResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*AddResourceReply, error) {
	out := new(AddResourceReply)
	err := c.cc.Invoke(ctx, Service_AddResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetResourceServerIds(ctx context.Context, in *GetResourceServerIdsRequest, opts ...grpc.CallOption) (*GetResourceServerIdsReply, error) {
	out := new(GetResourceServerIdsReply)
	err := c.cc.Invoke(ctx, Service_GetResourceServerIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetResourceValues(ctx context.Context, in *GetResourceValuesRequest, opts ...grpc.CallOption) (*GetResourceValuesReply, error) {
	out := new(GetResourceValuesReply)
	err := c.cc.Invoke(ctx, Service_GetResourceValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResourceValues(ctx context.Context, in *UpdateResourceValuesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResourceValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error)
	AddResource(context.Context, *AddResourceRequest) (*AddResourceReply, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	GetResourceServerIds(context.Context, *GetResourceServerIdsRequest) (*GetResourceServerIdsReply, error)
	GetResourceValues(context.Context, *GetResourceValuesRequest) (*GetResourceValuesReply, error)
	UpdateResourceValues(context.Context, *UpdateResourceValuesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageResource not implemented")
}
func (UnimplementedServiceServer) AddResource(context.Context, *AddResourceRequest) (*AddResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedServiceServer) GetResourceServerIds(context.Context, *GetResourceServerIdsRequest) (*GetResourceServerIdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceServerIds not implemented")
}
func (UnimplementedServiceServer) GetResourceValues(context.Context, *GetResourceValuesRequest) (*GetResourceValuesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceValues not implemented")
}
func (UnimplementedServiceServer) UpdateResourceValues(context.Context, *UpdateResourceValuesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceValues not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_PageResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageResource(ctx, req.(*PageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResource(ctx, req.(*AddResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetResourceServerIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceServerIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetResourceServerIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetResourceServerIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetResourceServerIds(ctx, req.(*GetResourceServerIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetResourceValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetResourceValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetResourceValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetResourceValues(ctx, req.(*GetResourceValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResourceValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResourceValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResourceValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResourceValues(ctx, req.(*UpdateResourceValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configure_resource.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageResource",
			Handler:    _Service_PageResource_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _Service_AddResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Service_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Service_DeleteResource_Handler,
		},
		{
			MethodName: "GetResourceServerIds",
			Handler:    _Service_GetResourceServerIds_Handler,
		},
		{
			MethodName: "GetResourceValues",
			Handler:    _Service_GetResourceValues_Handler,
		},
		{
			MethodName: "UpdateResourceValues",
			Handler:    _Service_UpdateResourceValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configure_resource_service.proto",
}
