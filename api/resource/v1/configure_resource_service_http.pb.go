// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: configure_resource_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddResource = "/configure_resource.Service/AddResource"
const OperationServiceDeleteResource = "/configure_resource.Service/DeleteResource"
const OperationServiceGetResourceServerIds = "/configure_resource.Service/GetResourceServerIds"
const OperationServiceGetResourceValues = "/configure_resource.Service/GetResourceValues"
const OperationServicePageResource = "/configure_resource.Service/PageResource"
const OperationServiceUpdateResource = "/configure_resource.Service/UpdateResource"
const OperationServiceUpdateResourceValues = "/configure_resource.Service/UpdateResourceValues"

type ServiceHTTPServer interface {
	AddResource(context.Context, *AddResourceRequest) (*AddResourceReply, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	GetResourceServerIds(context.Context, *GetResourceServerIdsRequest) (*GetResourceServerIdsReply, error)
	GetResourceValues(context.Context, *GetResourceValuesRequest) (*GetResourceValuesReply, error)
	PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error)
	UpdateResourceValues(context.Context, *UpdateResourceValuesRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/v1/resources", _Service_PageResource0_HTTP_Handler(srv))
	r.POST("/configure/v1/resource", _Service_AddResource0_HTTP_Handler(srv))
	r.PUT("/configure/v1/resource", _Service_UpdateResource0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/resource", _Service_DeleteResource0_HTTP_Handler(srv))
	r.GET("/configure/v1/resource/server/ids", _Service_GetResourceServerIds0_HTTP_Handler(srv))
	r.GET("/configure/v1/resource/values", _Service_GetResourceValues0_HTTP_Handler(srv))
	r.PUT("/configure/v1/resource/values", _Service_UpdateResourceValues0_HTTP_Handler(srv))
}

func _Service_PageResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageResource(ctx, req.(*PageResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddResource(ctx, req.(*AddResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResource(ctx, req.(*UpdateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_GetResourceServerIds0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceServerIdsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetResourceServerIds)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResourceServerIds(ctx, req.(*GetResourceServerIdsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceServerIdsReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetResourceValues0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetResourceValuesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetResourceValues)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetResourceValues(ctx, req.(*GetResourceValuesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetResourceValuesReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateResourceValues0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceValuesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateResourceValues)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceValues(ctx, req.(*UpdateResourceValuesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddResource(ctx context.Context, req *AddResourceRequest, opts ...http.CallOption) (rsp *AddResourceReply, err error)
	DeleteResource(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetResourceServerIds(ctx context.Context, req *GetResourceServerIdsRequest, opts ...http.CallOption) (rsp *GetResourceServerIdsReply, err error)
	GetResourceValues(ctx context.Context, req *GetResourceValuesRequest, opts ...http.CallOption) (rsp *GetResourceValuesReply, err error)
	PageResource(ctx context.Context, req *PageResourceRequest, opts ...http.CallOption) (rsp *PageResourceReply, err error)
	UpdateResource(ctx context.Context, req *UpdateResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateResourceValues(ctx context.Context, req *UpdateResourceValuesRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddResource(ctx context.Context, in *AddResourceRequest, opts ...http.CallOption) (*AddResourceReply, error) {
	var out AddResourceReply
	pattern := "/configure/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetResourceServerIds(ctx context.Context, in *GetResourceServerIdsRequest, opts ...http.CallOption) (*GetResourceServerIdsReply, error) {
	var out GetResourceServerIdsReply
	pattern := "/configure/v1/resource/server/ids"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetResourceServerIds))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetResourceValues(ctx context.Context, in *GetResourceValuesRequest, opts ...http.CallOption) (*GetResourceValuesReply, error) {
	var out GetResourceValuesReply
	pattern := "/configure/v1/resource/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetResourceValues))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageResource(ctx context.Context, in *PageResourceRequest, opts ...http.CallOption) (*PageResourceReply, error) {
	var out PageResourceReply
	pattern := "/configure/v1/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateResourceValues(ctx context.Context, in *UpdateResourceValuesRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/resource/values"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateResourceValues))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
