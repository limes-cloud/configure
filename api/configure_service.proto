syntax = "proto3";

package configure;
option go_package = "./v1;v1";

import "configure_auth.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "configure_environment.proto";
import "configure_server.proto";
import "configure_resource.proto";
import "configure_resource_value.proto";
import "configure_resource_server.proto";
import "configure_business.proto";
import "configure_business_value.proto";
import "configure_template.proto";
import "configure_configure.proto";

service Service {

  rpc Login(LoginRequest) returns(LoginReply){
    option (google.api.http) = {
      post: "/configure/v1/login",
      body: "*"
    };
  }

  rpc RefreshToken(google.protobuf.Empty) returns(RefreshTokenReply){
    option (google.api.http) = {
      post: "/configure/v1/token/refresh",
    };
  }

  rpc AllEnvironment (google.protobuf.Empty) returns (AllEnvironmentReply) {
    option (google.api.http) = {
      get: "/configure/v1/environments",
      response_body: "list"
    };
  }

  rpc AddEnvironment (AddEnvironmentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/configure/v1/environment",
      body:"*",
    };
  }

  rpc UpdateEnvironment (UpdateEnvironmentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/configure/v1/environment",
      body:"*"
    };
  }

  rpc DeleteEnvironment (DeleteEnvironmentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/configure/v1/environment"
    };
  }

  rpc GetEnvironmentToken (GetEnvironmentTokenRequest) returns (GetEnvironmentTokenReply) {
    option (google.api.http) = {
      get: "/configure/v1/environment/token"
    };
  }

  rpc ResetEnvironmentToken (ResetEnvironmentTokenRequest) returns (ResetEnvironmentTokenReply) {
    option (google.api.http) = {
      put: "/configure/v1/environment/token",
      body:"*"
    };
  }

  rpc PageServer (PageServerRequest) returns (PageServerReply) {
    option (google.api.http) = {
      get: "/configure/v1/servers",
    };
  }

  rpc GetServer (GetServerRequest) returns (GetServerReply) {
    option (google.api.http) = {
      get: "/configure/v1/server",
      response_body: "server"
    };
  }

  rpc AddServer (AddServerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/configure/v1/server",
      body:"*"
    };
  }

  rpc UpdateServer (UpdateServerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/configure/v1/server",
      body:"*"
    };
  }

  rpc DeleteServer (DeleteServerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/configure/v1/server"
    };
  }

  rpc PageResource (PageResourceRequest) returns (PageResourceReply) {
    option (google.api.http) = {
      get: "/configure/v1/resources"
    };
  }

  rpc AddResource (AddResourceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/configure/v1/resource",
      body:"*"
    };
  }

  rpc UpdateResource (UpdateResourceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/configure/v1/resource",
      body:"*"
    };
  }

  rpc DeleteResource (DeleteResourceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/configure/v1/resource"
    };
  }

  rpc AllResourceServer (AllResourceServerRequest) returns (AllResourceServerReply) {
    option (google.api.http) = {
      get: "/configure/v1/resource/servers",
      response_body:"list"
    };
  }

  rpc PageServerResource (PageServerResourceRequest) returns (PageServerResourceReply) {
    option (google.api.http) = {
      get: "/configure/v1/server/resources",
      response_body: "*"
    };
  }

  rpc AllResourceValue (AllResourceValueRequest) returns (AllResourceValueReply) {
    option (google.api.http) = {
      get: "/configure/v1/resource/values",
      response_body: "list"
    };
  }

  rpc UpdateResourceValue (UpdateResourceValueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/configure/v1/resource/value",
      body:"*"
    };
  }

  rpc PageBusiness (PageBusinessRequest) returns (PageBusinessReply) {
    option (google.api.http) = {
      get: "/configure/v1/business"
    };
  }

  rpc AddBusiness (AddBusinessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/configure/v1/business",
      body:"*"
    };
  }

  rpc UpdateBusiness (UpdateBusinessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/configure/v1/business",
      body:"*"
    };
  }

  rpc DeleteBusiness (DeleteBusinessRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/configure/v1/business"
    };
  }

  rpc AllBusinessValue (AllBusinessValueRequest) returns (AllBusinessValueReply) {
    option (google.api.http) = {
      get: "/configure/v1/business/values",
      response_body:"list"
    };
  }


  rpc UpdateBusinessValue (UpdateBusinessValueRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/configure/v1/business/value",
      body:"*"
    };
  }

  rpc PageTemplate (PageTemplateRequest) returns (PageTemplateReply) {
    option (google.api.http) = {
      get: "/configure/v1/templates",
      response_body: "*"
    };
  }

  rpc GetTemplate (GetTemplateRequest) returns (GetTemplateReply) {
    option (google.api.http) = {
      get: "/configure/v1/template",
      response_body: "*"
    };
  }

  rpc CurrentTemplate (CurrentTemplateRequest) returns (CurrentTemplateReply) {
    option (google.api.http) = {
      get: "/configure/v1/template/current",
      response_body: "template"
    };
  }

  rpc AddTemplate (AddTemplateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/configure/v1/template",
      body:"*"
    };
  }

  rpc SwitchTemplate (SwitchTemplateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/configure/v1/template/switch",
      body:"*"
    };
  }

  rpc CompareTemplate (CompareTemplateRequest) returns (CompareTemplateReply) {
    option (google.api.http) = {
      post: "/configure/v1/template/compare",
      body:"*",
      response_body:"list",
    };
  }

  rpc ParseTemplatePreview (ParseTemplatePreviewRequest) returns (ParseTemplatePreviewReply) {
    option (google.api.http) = {
      post: "/configure/v1/template/preview/{env_keyword}",
      body:"*"
    };
  }

  rpc ParseTemplate (ParseTemplateRequest) returns (ParseTemplateReply) {
    option (google.api.http) = {
      post: "/configure/v1/template/parse/{env_keyword}",
      body:"*"
    };
  }

  rpc GetConfigure (GetConfigureRequest) returns (GetConfigureReply) {
    option (google.api.http) = {
      get: "/configure/v1/configure/{env_keyword}"
    };
  }

  rpc UpdateConfigure (UpdateConfigureRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/configure/v1/configure/{env_keyword}",
      body:"*"
    };
  }

  rpc CompareConfigure (CompareConfigureRequest) returns (CompareConfigureReply) {
    option (google.api.http) = {
      post: "/configure/v1/configure/compare/{env_keyword}",
      body:"*",
      response_body:"list",
    };
  }

  rpc WatchConfigure (WatchConfigureRequest) returns (stream WatchConfigureReply);

}