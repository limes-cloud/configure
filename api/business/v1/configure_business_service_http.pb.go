// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: configure_business_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddBusiness = "/configure_business.Service/AddBusiness"
const OperationServiceDeleteBusiness = "/configure_business.Service/DeleteBusiness"
const OperationServiceGetBusinessValues = "/configure_business.Service/GetBusinessValues"
const OperationServicePageBusiness = "/configure_business.Service/PageBusiness"
const OperationServiceUpdateBusiness = "/configure_business.Service/UpdateBusiness"
const OperationServiceUpdateBusinessValues = "/configure_business.Service/UpdateBusinessValues"

type ServiceHTTPServer interface {
	AddBusiness(context.Context, *AddBusinessRequest) (*emptypb.Empty, error)
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*emptypb.Empty, error)
	GetBusinessValues(context.Context, *GetBusinessValuesRequest) (*GetBusinessValuesReply, error)
	PageBusiness(context.Context, *PageBusinessRequest) (*PageBusinessReply, error)
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*emptypb.Empty, error)
	UpdateBusinessValues(context.Context, *UpdateBusinessValueRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/configure/v1/business", _Service_PageBusiness0_HTTP_Handler(srv))
	r.POST("/configure/v1/business", _Service_AddBusiness0_HTTP_Handler(srv))
	r.PUT("/configure/v1/business", _Service_UpdateBusiness0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/business", _Service_DeleteBusiness0_HTTP_Handler(srv))
	r.GET("/configure/v1/business/values", _Service_GetBusinessValues0_HTTP_Handler(srv))
	r.PUT("/configure/v1/business/values", _Service_UpdateBusinessValues0_HTTP_Handler(srv))
}

func _Service_PageBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageBusinessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageBusiness(ctx, req.(*PageBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageBusinessReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddBusinessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddBusiness(ctx, req.(*AddBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBusinessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBusinessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_GetBusinessValues0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBusinessValuesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetBusinessValues)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetBusinessValues(ctx, req.(*GetBusinessValuesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBusinessValuesReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateBusinessValues0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBusinessValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateBusinessValues)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBusinessValues(ctx, req.(*UpdateBusinessValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddBusiness(ctx context.Context, req *AddBusinessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteBusiness(ctx context.Context, req *DeleteBusinessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetBusinessValues(ctx context.Context, req *GetBusinessValuesRequest, opts ...http.CallOption) (rsp *GetBusinessValuesReply, err error)
	PageBusiness(ctx context.Context, req *PageBusinessRequest, opts ...http.CallOption) (rsp *PageBusinessReply, err error)
	UpdateBusiness(ctx context.Context, req *UpdateBusinessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateBusinessValues(ctx context.Context, req *UpdateBusinessValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetBusinessValues(ctx context.Context, in *GetBusinessValuesRequest, opts ...http.CallOption) (*GetBusinessValuesReply, error) {
	var out GetBusinessValuesReply
	pattern := "/configure/v1/business/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetBusinessValues))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageBusiness(ctx context.Context, in *PageBusinessRequest, opts ...http.CallOption) (*PageBusinessReply, error) {
	var out PageBusinessReply
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateBusinessValues(ctx context.Context, in *UpdateBusinessValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business/values"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateBusinessValues))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
