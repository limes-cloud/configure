// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: configure_business.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Business with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Business) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Business with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BusinessMultiError, or nil
// if none found.
func (m *Business) ValidateAll() error {
	return m.validate(true)
}

func (m *Business) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Type

	// no validation rules for Keyword

	// no validation rules for Description

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return BusinessMultiError(errors)
	}

	return nil
}

// BusinessMultiError is an error wrapping multiple validation errors returned
// by Business.ValidateAll() if the designated constraints aren't met.
type BusinessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BusinessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BusinessMultiError) AllErrors() []error { return m }

// BusinessValidationError is the validation error returned by
// Business.Validate if the designated constraints aren't met.
type BusinessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidationError) ErrorName() string { return "BusinessValidationError" }

// Error satisfies the builtin error interface
func (e BusinessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusiness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidationError{}

// Validate checks the field values on PageBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageBusinessRequestMultiError, or nil if none found.
func (m *PageBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageBusinessRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageBusinessRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := PageBusinessRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if m.Tag != nil {
		// no validation rules for Tag
	}

	if len(errors) > 0 {
		return PageBusinessRequestMultiError(errors)
	}

	return nil
}

// PageBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by PageBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type PageBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageBusinessRequestMultiError) AllErrors() []error { return m }

// PageBusinessRequestValidationError is the validation error returned by
// PageBusinessRequest.Validate if the designated constraints aren't met.
type PageBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageBusinessRequestValidationError) ErrorName() string {
	return "PageBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageBusinessRequestValidationError{}

// Validate checks the field values on PageBusinessReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageBusinessReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageBusinessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageBusinessReplyMultiError, or nil if none found.
func (m *PageBusinessReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageBusinessReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageBusinessReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageBusinessReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageBusinessReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageBusinessReplyMultiError(errors)
	}

	return nil
}

// PageBusinessReplyMultiError is an error wrapping multiple validation errors
// returned by PageBusinessReply.ValidateAll() if the designated constraints
// aren't met.
type PageBusinessReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageBusinessReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageBusinessReplyMultiError) AllErrors() []error { return m }

// PageBusinessReplyValidationError is the validation error returned by
// PageBusinessReply.Validate if the designated constraints aren't met.
type PageBusinessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageBusinessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageBusinessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageBusinessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageBusinessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageBusinessReplyValidationError) ErrorName() string {
	return "PageBusinessReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageBusinessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageBusinessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageBusinessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageBusinessReplyValidationError{}

// Validate checks the field values on AddBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBusinessRequestMultiError, or nil if none found.
func (m *AddBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := AddBusinessRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := AddBusinessRequestValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := AddBusinessRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 12 {
		err := AddBusinessRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddBusinessRequestMultiError(errors)
	}

	return nil
}

// AddBusinessRequestMultiError is an error wrapping multiple validation errors
// returned by AddBusinessRequest.ValidateAll() if the designated constraints
// aren't met.
type AddBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBusinessRequestMultiError) AllErrors() []error { return m }

// AddBusinessRequestValidationError is the validation error returned by
// AddBusinessRequest.Validate if the designated constraints aren't met.
type AddBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBusinessRequestValidationError) ErrorName() string {
	return "AddBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBusinessRequestValidationError{}

// Validate checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessRequestMultiError, or nil if none found.
func (m *UpdateBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateBusinessRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := UpdateBusinessRequestValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := UpdateBusinessRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetType()); l < 1 || l > 12 {
		err := UpdateBusinessRequestValidationError{
			field:  "Type",
			reason: "value length must be between 1 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateBusinessRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessRequestValidationError is the validation error returned by
// UpdateBusinessRequest.Validate if the designated constraints aren't met.
type UpdateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessRequestValidationError) ErrorName() string {
	return "UpdateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessRequestValidationError{}

// Validate checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBusinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBusinessRequestMultiError, or nil if none found.
func (m *DeleteBusinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBusinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteBusinessRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteBusinessRequestMultiError(errors)
	}

	return nil
}

// DeleteBusinessRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBusinessRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBusinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBusinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBusinessRequestMultiError) AllErrors() []error { return m }

// DeleteBusinessRequestValidationError is the validation error returned by
// DeleteBusinessRequest.Validate if the designated constraints aren't met.
type DeleteBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessRequestValidationError) ErrorName() string {
	return "DeleteBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessRequestValidationError{}

// Validate checks the field values on GetBusinessValuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessValuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessValuesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessValuesRequestMultiError, or nil if none found.
func (m *GetBusinessValuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessValuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessId() <= 0 {
		err := GetBusinessValuesRequestValidationError{
			field:  "BusinessId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBusinessValuesRequestMultiError(errors)
	}

	return nil
}

// GetBusinessValuesRequestMultiError is an error wrapping multiple validation
// errors returned by GetBusinessValuesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessValuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessValuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessValuesRequestMultiError) AllErrors() []error { return m }

// GetBusinessValuesRequestValidationError is the validation error returned by
// GetBusinessValuesRequest.Validate if the designated constraints aren't met.
type GetBusinessValuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessValuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessValuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessValuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessValuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessValuesRequestValidationError) ErrorName() string {
	return "GetBusinessValuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessValuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessValuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessValuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessValuesRequestValidationError{}

// Validate checks the field values on GetBusinessValuesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBusinessValuesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessValuesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBusinessValuesReplyMultiError, or nil if none found.
func (m *GetBusinessValuesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessValuesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBusinessValuesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBusinessValuesReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBusinessValuesReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBusinessValuesReplyMultiError(errors)
	}

	return nil
}

// GetBusinessValuesReplyMultiError is an error wrapping multiple validation
// errors returned by GetBusinessValuesReply.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessValuesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessValuesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessValuesReplyMultiError) AllErrors() []error { return m }

// GetBusinessValuesReplyValidationError is the validation error returned by
// GetBusinessValuesReply.Validate if the designated constraints aren't met.
type GetBusinessValuesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessValuesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessValuesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessValuesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessValuesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessValuesReplyValidationError) ErrorName() string {
	return "GetBusinessValuesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessValuesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessValuesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessValuesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessValuesReplyValidationError{}

// Validate checks the field values on UpdateBusinessValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessValueRequestMultiError, or nil if none found.
func (m *UpdateBusinessValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessId() <= 0 {
		err := UpdateBusinessValueRequestValidationError{
			field:  "BusinessId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateBusinessValueRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateBusinessValueRequestValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateBusinessValueRequestValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateBusinessValueRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessValueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessValueRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateBusinessValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessValueRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessValueRequestValidationError is the validation error returned
// by UpdateBusinessValueRequest.Validate if the designated constraints aren't met.
type UpdateBusinessValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessValueRequestValidationError) ErrorName() string {
	return "UpdateBusinessValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessValueRequestValidationError{}

// Validate checks the field values on GetBusinessValuesReply_BusinessValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBusinessValuesReply_BusinessValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBusinessValuesReply_BusinessValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBusinessValuesReply_BusinessValueMultiError, or nil if none found.
func (m *GetBusinessValuesReply_BusinessValue) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBusinessValuesReply_BusinessValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnvId

	// no validation rules for BusinessId

	// no validation rules for Value

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return GetBusinessValuesReply_BusinessValueMultiError(errors)
	}

	return nil
}

// GetBusinessValuesReply_BusinessValueMultiError is an error wrapping multiple
// validation errors returned by
// GetBusinessValuesReply_BusinessValue.ValidateAll() if the designated
// constraints aren't met.
type GetBusinessValuesReply_BusinessValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBusinessValuesReply_BusinessValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBusinessValuesReply_BusinessValueMultiError) AllErrors() []error { return m }

// GetBusinessValuesReply_BusinessValueValidationError is the validation error
// returned by GetBusinessValuesReply_BusinessValue.Validate if the designated
// constraints aren't met.
type GetBusinessValuesReply_BusinessValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessValuesReply_BusinessValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessValuesReply_BusinessValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessValuesReply_BusinessValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessValuesReply_BusinessValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessValuesReply_BusinessValueValidationError) ErrorName() string {
	return "GetBusinessValuesReply_BusinessValueValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessValuesReply_BusinessValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessValuesReply_BusinessValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessValuesReply_BusinessValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessValuesReply_BusinessValueValidationError{}

// Validate checks the field values on UpdateBusinessValueRequest_BusinessValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateBusinessValueRequest_BusinessValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateBusinessValueRequest_BusinessValue with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateBusinessValueRequest_BusinessValueMultiError, or nil if none found.
func (m *UpdateBusinessValueRequest_BusinessValue) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessValueRequest_BusinessValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEnvId() <= 0 {
		err := UpdateBusinessValueRequest_BusinessValueValidationError{
			field:  "EnvId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := UpdateBusinessValueRequest_BusinessValueValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateBusinessValueRequest_BusinessValueMultiError(errors)
	}

	return nil
}

// UpdateBusinessValueRequest_BusinessValueMultiError is an error wrapping
// multiple validation errors returned by
// UpdateBusinessValueRequest_BusinessValue.ValidateAll() if the designated
// constraints aren't met.
type UpdateBusinessValueRequest_BusinessValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessValueRequest_BusinessValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessValueRequest_BusinessValueMultiError) AllErrors() []error { return m }

// UpdateBusinessValueRequest_BusinessValueValidationError is the validation
// error returned by UpdateBusinessValueRequest_BusinessValue.Validate if the
// designated constraints aren't met.
type UpdateBusinessValueRequest_BusinessValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessValueRequest_BusinessValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessValueRequest_BusinessValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessValueRequest_BusinessValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessValueRequest_BusinessValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessValueRequest_BusinessValueValidationError) ErrorName() string {
	return "UpdateBusinessValueRequest_BusinessValueValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessValueRequest_BusinessValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessValueRequest_BusinessValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessValueRequest_BusinessValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessValueRequest_BusinessValueValidationError{}
