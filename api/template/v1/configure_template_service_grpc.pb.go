// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: configure_template_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_PageTemplate_FullMethodName    = "/configure_template.Service/PageTemplate"
	Service_GetTemplate_FullMethodName     = "/configure_template.Service/GetTemplate"
	Service_CurrentTemplate_FullMethodName = "/configure_template.Service/CurrentTemplate"
	Service_AddTemplate_FullMethodName     = "/configure_template.Service/AddTemplate"
	Service_SwitchTemplate_FullMethodName  = "/configure_template.Service/SwitchTemplate"
	Service_CompareTemplate_FullMethodName = "/configure_template.Service/CompareTemplate"
	Service_PreviewTemplate_FullMethodName = "/configure_template.Service/PreviewTemplate"
	Service_ParseTemplate_FullMethodName   = "/configure_template.Service/ParseTemplate"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	PageTemplate(ctx context.Context, in *PageTemplateRequest, opts ...grpc.CallOption) (*PageTemplateReply, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateReply, error)
	CurrentTemplate(ctx context.Context, in *CurrentTemplateRequest, opts ...grpc.CallOption) (*CurrentTemplateReply, error)
	AddTemplate(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SwitchTemplate(ctx context.Context, in *SwitchTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CompareTemplate(ctx context.Context, in *CompareTemplateRequest, opts ...grpc.CallOption) (*CompareTemplateReply, error)
	PreviewTemplate(ctx context.Context, in *PreviewTemplateRequest, opts ...grpc.CallOption) (*PreviewTemplateReply, error)
	ParseTemplate(ctx context.Context, in *ParseTemplateRequest, opts ...grpc.CallOption) (*ParseTemplateReply, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) PageTemplate(ctx context.Context, in *PageTemplateRequest, opts ...grpc.CallOption) (*PageTemplateReply, error) {
	out := new(PageTemplateReply)
	err := c.cc.Invoke(ctx, Service_PageTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateReply, error) {
	out := new(GetTemplateReply)
	err := c.cc.Invoke(ctx, Service_GetTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CurrentTemplate(ctx context.Context, in *CurrentTemplateRequest, opts ...grpc.CallOption) (*CurrentTemplateReply, error) {
	out := new(CurrentTemplateReply)
	err := c.cc.Invoke(ctx, Service_CurrentTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddTemplate(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwitchTemplate(ctx context.Context, in *SwitchTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_SwitchTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CompareTemplate(ctx context.Context, in *CompareTemplateRequest, opts ...grpc.CallOption) (*CompareTemplateReply, error) {
	out := new(CompareTemplateReply)
	err := c.cc.Invoke(ctx, Service_CompareTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PreviewTemplate(ctx context.Context, in *PreviewTemplateRequest, opts ...grpc.CallOption) (*PreviewTemplateReply, error) {
	out := new(PreviewTemplateReply)
	err := c.cc.Invoke(ctx, Service_PreviewTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ParseTemplate(ctx context.Context, in *ParseTemplateRequest, opts ...grpc.CallOption) (*ParseTemplateReply, error) {
	out := new(ParseTemplateReply)
	err := c.cc.Invoke(ctx, Service_ParseTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	PageTemplate(context.Context, *PageTemplateRequest) (*PageTemplateReply, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateReply, error)
	CurrentTemplate(context.Context, *CurrentTemplateRequest) (*CurrentTemplateReply, error)
	AddTemplate(context.Context, *AddTemplateRequest) (*emptypb.Empty, error)
	SwitchTemplate(context.Context, *SwitchTemplateRequest) (*emptypb.Empty, error)
	CompareTemplate(context.Context, *CompareTemplateRequest) (*CompareTemplateReply, error)
	PreviewTemplate(context.Context, *PreviewTemplateRequest) (*PreviewTemplateReply, error)
	ParseTemplate(context.Context, *ParseTemplateRequest) (*ParseTemplateReply, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) PageTemplate(context.Context, *PageTemplateRequest) (*PageTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTemplate not implemented")
}
func (UnimplementedServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedServiceServer) CurrentTemplate(context.Context, *CurrentTemplateRequest) (*CurrentTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTemplate not implemented")
}
func (UnimplementedServiceServer) AddTemplate(context.Context, *AddTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTemplate not implemented")
}
func (UnimplementedServiceServer) SwitchTemplate(context.Context, *SwitchTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchTemplate not implemented")
}
func (UnimplementedServiceServer) CompareTemplate(context.Context, *CompareTemplateRequest) (*CompareTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareTemplate not implemented")
}
func (UnimplementedServiceServer) PreviewTemplate(context.Context, *PreviewTemplateRequest) (*PreviewTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewTemplate not implemented")
}
func (UnimplementedServiceServer) ParseTemplate(context.Context, *ParseTemplateRequest) (*ParseTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseTemplate not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_PageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageTemplate(ctx, req.(*PageTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CurrentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CurrentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CurrentTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CurrentTemplate(ctx, req.(*CurrentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddTemplate(ctx, req.(*AddTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SwitchTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SwitchTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SwitchTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SwitchTemplate(ctx, req.(*SwitchTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CompareTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CompareTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CompareTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CompareTemplate(ctx, req.(*CompareTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PreviewTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PreviewTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PreviewTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PreviewTemplate(ctx, req.(*PreviewTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ParseTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ParseTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ParseTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ParseTemplate(ctx, req.(*ParseTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configure_template.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageTemplate",
			Handler:    _Service_PageTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _Service_GetTemplate_Handler,
		},
		{
			MethodName: "CurrentTemplate",
			Handler:    _Service_CurrentTemplate_Handler,
		},
		{
			MethodName: "AddTemplate",
			Handler:    _Service_AddTemplate_Handler,
		},
		{
			MethodName: "SwitchTemplate",
			Handler:    _Service_SwitchTemplate_Handler,
		},
		{
			MethodName: "CompareTemplate",
			Handler:    _Service_CompareTemplate_Handler,
		},
		{
			MethodName: "PreviewTemplate",
			Handler:    _Service_PreviewTemplate_Handler,
		},
		{
			MethodName: "ParseTemplate",
			Handler:    _Service_ParseTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configure_template_service.proto",
}
