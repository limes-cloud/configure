// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: configure_template.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PageTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageTemplateRequestMultiError, or nil if none found.
func (m *PageTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageTemplateRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageTemplateRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := PageTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PageTemplateRequestMultiError(errors)
	}

	return nil
}

// PageTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by PageTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type PageTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageTemplateRequestMultiError) AllErrors() []error { return m }

// PageTemplateRequestValidationError is the validation error returned by
// PageTemplateRequest.Validate if the designated constraints aren't met.
type PageTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageTemplateRequestValidationError) ErrorName() string {
	return "PageTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageTemplateRequestValidationError{}

// Validate checks the field values on PageTemplateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageTemplateReplyMultiError, or nil if none found.
func (m *PageTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageTemplateReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageTemplateReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageTemplateReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageTemplateReplyMultiError(errors)
	}

	return nil
}

// PageTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by PageTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type PageTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageTemplateReplyMultiError) AllErrors() []error { return m }

// PageTemplateReplyValidationError is the validation error returned by
// PageTemplateReply.Validate if the designated constraints aren't met.
type PageTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageTemplateReplyValidationError) ErrorName() string {
	return "PageTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PageTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageTemplateReplyValidationError{}

// Validate checks the field values on CurrentTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentTemplateRequestMultiError, or nil if none found.
func (m *CurrentTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := CurrentTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CurrentTemplateRequestMultiError(errors)
	}

	return nil
}

// CurrentTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CurrentTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CurrentTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentTemplateRequestMultiError) AllErrors() []error { return m }

// CurrentTemplateRequestValidationError is the validation error returned by
// CurrentTemplateRequest.Validate if the designated constraints aren't met.
type CurrentTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentTemplateRequestValidationError) ErrorName() string {
	return "CurrentTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentTemplateRequestValidationError{}

// Validate checks the field values on CurrentTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CurrentTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CurrentTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CurrentTemplateReplyMultiError, or nil if none found.
func (m *CurrentTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CurrentTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Content

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for IsUse

	if m.Operator != nil {
		// no validation rules for Operator
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return CurrentTemplateReplyMultiError(errors)
	}

	return nil
}

// CurrentTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by CurrentTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type CurrentTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CurrentTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CurrentTemplateReplyMultiError) AllErrors() []error { return m }

// CurrentTemplateReplyValidationError is the validation error returned by
// CurrentTemplateReply.Validate if the designated constraints aren't met.
type CurrentTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CurrentTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CurrentTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CurrentTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CurrentTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CurrentTemplateReplyValidationError) ErrorName() string {
	return "CurrentTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CurrentTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCurrentTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CurrentTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CurrentTemplateReplyValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetTemplateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on GetTemplateReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateReplyMultiError, or nil if none found.
func (m *GetTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Content

	// no validation rules for Description

	// no validation rules for Version

	if m.IsUse != nil {
		// no validation rules for IsUse
	}

	if m.Operator != nil {
		// no validation rules for Operator
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return GetTemplateReplyMultiError(errors)
	}

	return nil
}

// GetTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by GetTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateReplyMultiError) AllErrors() []error { return m }

// GetTemplateReplyValidationError is the validation error returned by
// GetTemplateReply.Validate if the designated constraints aren't met.
type GetTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateReplyValidationError) ErrorName() string { return "GetTemplateReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateReplyValidationError{}

// Validate checks the field values on AddTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddTemplateRequestMultiError, or nil if none found.
func (m *AddTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := AddTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 3 {
		err := AddTemplateRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 3 || l > 64 {
		err := AddTemplateRequestValidationError{
			field:  "Description",
			reason: "value length must be between 3 and 64 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddTemplateRequestMultiError(errors)
	}

	return nil
}

// AddTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by AddTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type AddTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddTemplateRequestMultiError) AllErrors() []error { return m }

// AddTemplateRequestValidationError is the validation error returned by
// AddTemplateRequest.Validate if the designated constraints aren't met.
type AddTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddTemplateRequestValidationError) ErrorName() string {
	return "AddTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddTemplateRequestValidationError{}

// Validate checks the field values on UseTemplateVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UseTemplateVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UseTemplateVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UseTemplateVersionRequestMultiError, or nil if none found.
func (m *UseTemplateVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UseTemplateVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UseTemplateVersionRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := UseTemplateVersionRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UseTemplateVersionRequestMultiError(errors)
	}

	return nil
}

// UseTemplateVersionRequestMultiError is an error wrapping multiple validation
// errors returned by UseTemplateVersionRequest.ValidateAll() if the
// designated constraints aren't met.
type UseTemplateVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UseTemplateVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UseTemplateVersionRequestMultiError) AllErrors() []error { return m }

// UseTemplateVersionRequestValidationError is the validation error returned by
// UseTemplateVersionRequest.Validate if the designated constraints aren't met.
type UseTemplateVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseTemplateVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseTemplateVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseTemplateVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseTemplateVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseTemplateVersionRequestValidationError) ErrorName() string {
	return "UseTemplateVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UseTemplateVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseTemplateVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseTemplateVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseTemplateVersionRequestValidationError{}

// Validate checks the field values on ParseTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseTemplateRequestMultiError, or nil if none found.
func (m *ParseTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := ParseTemplateRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEnvironmentId() <= 0 {
		err := ParseTemplateRequestValidationError{
			field:  "EnvironmentId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ParseTemplateRequestMultiError(errors)
	}

	return nil
}

// ParseTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by ParseTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type ParseTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTemplateRequestMultiError) AllErrors() []error { return m }

// ParseTemplateRequestValidationError is the validation error returned by
// ParseTemplateRequest.Validate if the designated constraints aren't met.
type ParseTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTemplateRequestValidationError) ErrorName() string {
	return "ParseTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ParseTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTemplateRequestValidationError{}

// Validate checks the field values on ParseTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ParseTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParseTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ParseTemplateReplyMultiError, or nil if none found.
func (m *ParseTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ParseTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Content

	// no validation rules for Format

	if len(errors) > 0 {
		return ParseTemplateReplyMultiError(errors)
	}

	return nil
}

// ParseTemplateReplyMultiError is an error wrapping multiple validation errors
// returned by ParseTemplateReply.ValidateAll() if the designated constraints
// aren't met.
type ParseTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParseTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParseTemplateReplyMultiError) AllErrors() []error { return m }

// ParseTemplateReplyValidationError is the validation error returned by
// ParseTemplateReply.Validate if the designated constraints aren't met.
type ParseTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParseTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParseTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParseTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParseTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParseTemplateReplyValidationError) ErrorName() string {
	return "ParseTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ParseTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParseTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParseTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParseTemplateReplyValidationError{}

// Validate checks the field values on PageTemplateReply_Template with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageTemplateReply_Template) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageTemplateReply_Template with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageTemplateReply_TemplateMultiError, or nil if none found.
func (m *PageTemplateReply_Template) ValidateAll() error {
	return m.validate(true)
}

func (m *PageTemplateReply_Template) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ServerId

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for IsUse

	// no validation rules for CreatedAt

	if m.Operator != nil {
		// no validation rules for Operator
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return PageTemplateReply_TemplateMultiError(errors)
	}

	return nil
}

// PageTemplateReply_TemplateMultiError is an error wrapping multiple
// validation errors returned by PageTemplateReply_Template.ValidateAll() if
// the designated constraints aren't met.
type PageTemplateReply_TemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageTemplateReply_TemplateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageTemplateReply_TemplateMultiError) AllErrors() []error { return m }

// PageTemplateReply_TemplateValidationError is the validation error returned
// by PageTemplateReply_Template.Validate if the designated constraints aren't met.
type PageTemplateReply_TemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageTemplateReply_TemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageTemplateReply_TemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageTemplateReply_TemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageTemplateReply_TemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageTemplateReply_TemplateValidationError) ErrorName() string {
	return "PageTemplateReply_TemplateValidationError"
}

// Error satisfies the builtin error interface
func (e PageTemplateReply_TemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageTemplateReply_Template.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageTemplateReply_TemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageTemplateReply_TemplateValidationError{}
