// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: configure_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_AllEnvironment_FullMethodName        = "/configure.Service/AllEnvironment"
	Service_AddEnvironment_FullMethodName        = "/configure.Service/AddEnvironment"
	Service_UpdateEnvironment_FullMethodName     = "/configure.Service/UpdateEnvironment"
	Service_DeleteEnvironment_FullMethodName     = "/configure.Service/DeleteEnvironment"
	Service_GetEnvironmentToken_FullMethodName   = "/configure.Service/GetEnvironmentToken"
	Service_ResetEnvironmentToken_FullMethodName = "/configure.Service/ResetEnvironmentToken"
	Service_PageServer_FullMethodName            = "/configure.Service/PageServer"
	Service_GetServer_FullMethodName             = "/configure.Service/GetServer"
	Service_AddServer_FullMethodName             = "/configure.Service/AddServer"
	Service_UpdateServer_FullMethodName          = "/configure.Service/UpdateServer"
	Service_DeleteServer_FullMethodName          = "/configure.Service/DeleteServer"
	Service_PageResource_FullMethodName          = "/configure.Service/PageResource"
	Service_AddResource_FullMethodName           = "/configure.Service/AddResource"
	Service_UpdateResource_FullMethodName        = "/configure.Service/UpdateResource"
	Service_DeleteResource_FullMethodName        = "/configure.Service/DeleteResource"
	Service_AllResourceServer_FullMethodName     = "/configure.Service/AllResourceServer"
	Service_AddResourceServer_FullMethodName     = "/configure.Service/AddResourceServer"
	Service_DeleteResourceServer_FullMethodName  = "/configure.Service/DeleteResourceServer"
	Service_AllServerResource_FullMethodName     = "/configure.Service/AllServerResource"
	Service_AllResourceValue_FullMethodName      = "/configure.Service/AllResourceValue"
	Service_AddResourceValue_FullMethodName      = "/configure.Service/AddResourceValue"
	Service_UpdateResourceValue_FullMethodName   = "/configure.Service/UpdateResourceValue"
	Service_PageBusiness_FullMethodName          = "/configure.Service/PageBusiness"
	Service_AddBusiness_FullMethodName           = "/configure.Service/AddBusiness"
	Service_UpdateBusiness_FullMethodName        = "/configure.Service/UpdateBusiness"
	Service_DeleteBusiness_FullMethodName        = "/configure.Service/DeleteBusiness"
	Service_AllBusinessValue_FullMethodName      = "/configure.Service/AllBusinessValue"
	Service_AddBusinessValue_FullMethodName      = "/configure.Service/AddBusinessValue"
	Service_UpdateBusinessValue_FullMethodName   = "/configure.Service/UpdateBusinessValue"
	Service_PageTemplate_FullMethodName          = "/configure.Service/PageTemplate"
	Service_GetTemplate_FullMethodName           = "/configure.Service/GetTemplate"
	Service_CurrentTemplate_FullMethodName       = "/configure.Service/CurrentTemplate"
	Service_AddTemplate_FullMethodName           = "/configure.Service/AddTemplate"
	Service_UpdateTemplateVersion_FullMethodName = "/configure.Service/UpdateTemplateVersion"
	Service_ParseTemplate_FullMethodName         = "/configure.Service/ParseTemplate"
	Service_GetConfigure_FullMethodName          = "/configure.Service/GetConfigure"
	Service_UpdateConfigure_FullMethodName       = "/configure.Service/UpdateConfigure"
	Service_WatchConfigure_FullMethodName        = "/configure.Service/WatchConfigure"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	AllEnvironment(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllEnvironmentReply, error)
	AddEnvironment(ctx context.Context, in *AddEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetEnvironmentToken(ctx context.Context, in *GetEnvironmentTokenRequest, opts ...grpc.CallOption) (*GetEnvironmentTokenReply, error)
	ResetEnvironmentToken(ctx context.Context, in *ResetEnvironmentTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageServer(ctx context.Context, in *PageServerRequest, opts ...grpc.CallOption) (*PageServerReply, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerReply, error)
	AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageResource(ctx context.Context, in *PageResourceRequest, opts ...grpc.CallOption) (*PageResourceReply, error)
	AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllResourceServer(ctx context.Context, in *AllResourceServerRequest, opts ...grpc.CallOption) (*AllResourceServerReply, error)
	AddResourceServer(ctx context.Context, in *AddResourceServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteResourceServer(ctx context.Context, in *DeleteResourceServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllServerResource(ctx context.Context, in *AllServerResourceRequest, opts ...grpc.CallOption) (*AllServerResourceReply, error)
	AllResourceValue(ctx context.Context, in *AllResourceValueRequest, opts ...grpc.CallOption) (*AllResourceValueReply, error)
	AddResourceValue(ctx context.Context, in *AddResourceValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResourceValue(ctx context.Context, in *UpdateResourceValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageBusiness(ctx context.Context, in *PageBusinessRequest, opts ...grpc.CallOption) (*PageBusinessReply, error)
	AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AllBusinessValue(ctx context.Context, in *AllBusinessValueRequest, opts ...grpc.CallOption) (*AllBusinessValueReply, error)
	AddBusinessValue(ctx context.Context, in *AddBusinessValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBusinessValue(ctx context.Context, in *UpdateBusinessValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PageTemplate(ctx context.Context, in *PageTemplateRequest, opts ...grpc.CallOption) (*PageTemplateReply, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateReply, error)
	CurrentTemplate(ctx context.Context, in *CurrentTemplateRequest, opts ...grpc.CallOption) (*CurrentTemplateReply, error)
	AddTemplate(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTemplateVersion(ctx context.Context, in *UseTemplateVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ParseTemplate(ctx context.Context, in *ParseTemplateRequest, opts ...grpc.CallOption) (*ParseTemplateReply, error)
	GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*GetConfigureReply, error)
	UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WatchConfigure(ctx context.Context, in *WatchConfigureRequest, opts ...grpc.CallOption) (Service_WatchConfigureClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) AllEnvironment(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllEnvironmentReply, error) {
	out := new(AllEnvironmentReply)
	err := c.cc.Invoke(ctx, Service_AllEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddEnvironment(ctx context.Context, in *AddEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetEnvironmentToken(ctx context.Context, in *GetEnvironmentTokenRequest, opts ...grpc.CallOption) (*GetEnvironmentTokenReply, error) {
	out := new(GetEnvironmentTokenReply)
	err := c.cc.Invoke(ctx, Service_GetEnvironmentToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ResetEnvironmentToken(ctx context.Context, in *ResetEnvironmentTokenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_ResetEnvironmentToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageServer(ctx context.Context, in *PageServerRequest, opts ...grpc.CallOption) (*PageServerReply, error) {
	out := new(PageServerReply)
	err := c.cc.Invoke(ctx, Service_PageServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerReply, error) {
	out := new(GetServerReply)
	err := c.cc.Invoke(ctx, Service_GetServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddServer(ctx context.Context, in *AddServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageResource(ctx context.Context, in *PageResourceRequest, opts ...grpc.CallOption) (*PageResourceReply, error) {
	out := new(PageResourceReply)
	err := c.cc.Invoke(ctx, Service_PageResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllResourceServer(ctx context.Context, in *AllResourceServerRequest, opts ...grpc.CallOption) (*AllResourceServerReply, error) {
	out := new(AllResourceServerReply)
	err := c.cc.Invoke(ctx, Service_AllResourceServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResourceServer(ctx context.Context, in *AddResourceServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddResourceServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteResourceServer(ctx context.Context, in *DeleteResourceServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteResourceServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllServerResource(ctx context.Context, in *AllServerResourceRequest, opts ...grpc.CallOption) (*AllServerResourceReply, error) {
	out := new(AllServerResourceReply)
	err := c.cc.Invoke(ctx, Service_AllServerResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllResourceValue(ctx context.Context, in *AllResourceValueRequest, opts ...grpc.CallOption) (*AllResourceValueReply, error) {
	out := new(AllResourceValueReply)
	err := c.cc.Invoke(ctx, Service_AllResourceValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddResourceValue(ctx context.Context, in *AddResourceValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddResourceValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateResourceValue(ctx context.Context, in *UpdateResourceValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateResourceValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageBusiness(ctx context.Context, in *PageBusinessRequest, opts ...grpc.CallOption) (*PageBusinessReply, error) {
	out := new(PageBusinessReply)
	err := c.cc.Invoke(ctx, Service_PageBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteBusiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AllBusinessValue(ctx context.Context, in *AllBusinessValueRequest, opts ...grpc.CallOption) (*AllBusinessValueReply, error) {
	out := new(AllBusinessValueReply)
	err := c.cc.Invoke(ctx, Service_AllBusinessValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddBusinessValue(ctx context.Context, in *AddBusinessValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddBusinessValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateBusinessValue(ctx context.Context, in *UpdateBusinessValueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateBusinessValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PageTemplate(ctx context.Context, in *PageTemplateRequest, opts ...grpc.CallOption) (*PageTemplateReply, error) {
	out := new(PageTemplateReply)
	err := c.cc.Invoke(ctx, Service_PageTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateReply, error) {
	out := new(GetTemplateReply)
	err := c.cc.Invoke(ctx, Service_GetTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CurrentTemplate(ctx context.Context, in *CurrentTemplateRequest, opts ...grpc.CallOption) (*CurrentTemplateReply, error) {
	out := new(CurrentTemplateReply)
	err := c.cc.Invoke(ctx, Service_CurrentTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AddTemplate(ctx context.Context, in *AddTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_AddTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTemplateVersion(ctx context.Context, in *UseTemplateVersionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateTemplateVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ParseTemplate(ctx context.Context, in *ParseTemplateRequest, opts ...grpc.CallOption) (*ParseTemplateReply, error) {
	out := new(ParseTemplateReply)
	err := c.cc.Invoke(ctx, Service_ParseTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...grpc.CallOption) (*GetConfigureReply, error) {
	out := new(GetConfigureReply)
	err := c.cc.Invoke(ctx, Service_GetConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_UpdateConfigure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) WatchConfigure(ctx context.Context, in *WatchConfigureRequest, opts ...grpc.CallOption) (Service_WatchConfigureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_WatchConfigure_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceWatchConfigureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_WatchConfigureClient interface {
	Recv() (*WatchConfigureReply, error)
	grpc.ClientStream
}

type serviceWatchConfigureClient struct {
	grpc.ClientStream
}

func (x *serviceWatchConfigureClient) Recv() (*WatchConfigureReply, error) {
	m := new(WatchConfigureReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	AllEnvironment(context.Context, *emptypb.Empty) (*AllEnvironmentReply, error)
	AddEnvironment(context.Context, *AddEnvironmentRequest) (*emptypb.Empty, error)
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*emptypb.Empty, error)
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*emptypb.Empty, error)
	GetEnvironmentToken(context.Context, *GetEnvironmentTokenRequest) (*GetEnvironmentTokenReply, error)
	ResetEnvironmentToken(context.Context, *ResetEnvironmentTokenRequest) (*emptypb.Empty, error)
	PageServer(context.Context, *PageServerRequest) (*PageServerReply, error)
	GetServer(context.Context, *GetServerRequest) (*GetServerReply, error)
	AddServer(context.Context, *AddServerRequest) (*emptypb.Empty, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*emptypb.Empty, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error)
	PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error)
	AddResource(context.Context, *AddResourceRequest) (*emptypb.Empty, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	AllResourceServer(context.Context, *AllResourceServerRequest) (*AllResourceServerReply, error)
	AddResourceServer(context.Context, *AddResourceServerRequest) (*emptypb.Empty, error)
	DeleteResourceServer(context.Context, *DeleteResourceServerRequest) (*emptypb.Empty, error)
	AllServerResource(context.Context, *AllServerResourceRequest) (*AllServerResourceReply, error)
	AllResourceValue(context.Context, *AllResourceValueRequest) (*AllResourceValueReply, error)
	AddResourceValue(context.Context, *AddResourceValueRequest) (*emptypb.Empty, error)
	UpdateResourceValue(context.Context, *UpdateResourceValueRequest) (*emptypb.Empty, error)
	PageBusiness(context.Context, *PageBusinessRequest) (*PageBusinessReply, error)
	AddBusiness(context.Context, *AddBusinessRequest) (*emptypb.Empty, error)
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*emptypb.Empty, error)
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*emptypb.Empty, error)
	AllBusinessValue(context.Context, *AllBusinessValueRequest) (*AllBusinessValueReply, error)
	AddBusinessValue(context.Context, *AddBusinessValueRequest) (*emptypb.Empty, error)
	UpdateBusinessValue(context.Context, *UpdateBusinessValueRequest) (*emptypb.Empty, error)
	PageTemplate(context.Context, *PageTemplateRequest) (*PageTemplateReply, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateReply, error)
	CurrentTemplate(context.Context, *CurrentTemplateRequest) (*CurrentTemplateReply, error)
	AddTemplate(context.Context, *AddTemplateRequest) (*emptypb.Empty, error)
	UpdateTemplateVersion(context.Context, *UseTemplateVersionRequest) (*emptypb.Empty, error)
	ParseTemplate(context.Context, *ParseTemplateRequest) (*ParseTemplateReply, error)
	GetConfigure(context.Context, *GetConfigureRequest) (*GetConfigureReply, error)
	UpdateConfigure(context.Context, *UpdateConfigureRequest) (*emptypb.Empty, error)
	WatchConfigure(*WatchConfigureRequest, Service_WatchConfigureServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) AllEnvironment(context.Context, *emptypb.Empty) (*AllEnvironmentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllEnvironment not implemented")
}
func (UnimplementedServiceServer) AddEnvironment(context.Context, *AddEnvironmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEnvironment not implemented")
}
func (UnimplementedServiceServer) UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedServiceServer) DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (UnimplementedServiceServer) GetEnvironmentToken(context.Context, *GetEnvironmentTokenRequest) (*GetEnvironmentTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvironmentToken not implemented")
}
func (UnimplementedServiceServer) ResetEnvironmentToken(context.Context, *ResetEnvironmentTokenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetEnvironmentToken not implemented")
}
func (UnimplementedServiceServer) PageServer(context.Context, *PageServerRequest) (*PageServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageServer not implemented")
}
func (UnimplementedServiceServer) GetServer(context.Context, *GetServerRequest) (*GetServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedServiceServer) AddServer(context.Context, *AddServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddServer not implemented")
}
func (UnimplementedServiceServer) UpdateServer(context.Context, *UpdateServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedServiceServer) DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedServiceServer) PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageResource not implemented")
}
func (UnimplementedServiceServer) AddResource(context.Context, *AddResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedServiceServer) AllResourceServer(context.Context, *AllResourceServerRequest) (*AllResourceServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllResourceServer not implemented")
}
func (UnimplementedServiceServer) AddResourceServer(context.Context, *AddResourceServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceServer not implemented")
}
func (UnimplementedServiceServer) DeleteResourceServer(context.Context, *DeleteResourceServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceServer not implemented")
}
func (UnimplementedServiceServer) AllServerResource(context.Context, *AllServerResourceRequest) (*AllServerResourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllServerResource not implemented")
}
func (UnimplementedServiceServer) AllResourceValue(context.Context, *AllResourceValueRequest) (*AllResourceValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllResourceValue not implemented")
}
func (UnimplementedServiceServer) AddResourceValue(context.Context, *AddResourceValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceValue not implemented")
}
func (UnimplementedServiceServer) UpdateResourceValue(context.Context, *UpdateResourceValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceValue not implemented")
}
func (UnimplementedServiceServer) PageBusiness(context.Context, *PageBusinessRequest) (*PageBusinessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageBusiness not implemented")
}
func (UnimplementedServiceServer) AddBusiness(context.Context, *AddBusinessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusiness not implemented")
}
func (UnimplementedServiceServer) UpdateBusiness(context.Context, *UpdateBusinessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusiness not implemented")
}
func (UnimplementedServiceServer) DeleteBusiness(context.Context, *DeleteBusinessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBusiness not implemented")
}
func (UnimplementedServiceServer) AllBusinessValue(context.Context, *AllBusinessValueRequest) (*AllBusinessValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllBusinessValue not implemented")
}
func (UnimplementedServiceServer) AddBusinessValue(context.Context, *AddBusinessValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBusinessValue not implemented")
}
func (UnimplementedServiceServer) UpdateBusinessValue(context.Context, *UpdateBusinessValueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBusinessValue not implemented")
}
func (UnimplementedServiceServer) PageTemplate(context.Context, *PageTemplateRequest) (*PageTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageTemplate not implemented")
}
func (UnimplementedServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedServiceServer) CurrentTemplate(context.Context, *CurrentTemplateRequest) (*CurrentTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentTemplate not implemented")
}
func (UnimplementedServiceServer) AddTemplate(context.Context, *AddTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTemplate not implemented")
}
func (UnimplementedServiceServer) UpdateTemplateVersion(context.Context, *UseTemplateVersionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateVersion not implemented")
}
func (UnimplementedServiceServer) ParseTemplate(context.Context, *ParseTemplateRequest) (*ParseTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseTemplate not implemented")
}
func (UnimplementedServiceServer) GetConfigure(context.Context, *GetConfigureRequest) (*GetConfigureReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigure not implemented")
}
func (UnimplementedServiceServer) UpdateConfigure(context.Context, *UpdateConfigureRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigure not implemented")
}
func (UnimplementedServiceServer) WatchConfigure(*WatchConfigureRequest, Service_WatchConfigureServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchConfigure not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_AllEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllEnvironment(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddEnvironment(ctx, req.(*AddEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateEnvironment(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetEnvironmentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvironmentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetEnvironmentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetEnvironmentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetEnvironmentToken(ctx, req.(*GetEnvironmentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ResetEnvironmentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetEnvironmentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ResetEnvironmentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ResetEnvironmentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ResetEnvironmentToken(ctx, req.(*ResetEnvironmentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageServer(ctx, req.(*PageServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddServer(ctx, req.(*AddServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageResource(ctx, req.(*PageResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResource(ctx, req.(*AddResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllResourceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllResourceServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllResourceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllResourceServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllResourceServer(ctx, req.(*AllResourceServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResourceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResourceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResourceServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResourceServer(ctx, req.(*AddResourceServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteResourceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteResourceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteResourceServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteResourceServer(ctx, req.(*DeleteResourceServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllServerResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllServerResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllServerResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllServerResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllServerResource(ctx, req.(*AllServerResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllResourceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllResourceValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllResourceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllResourceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllResourceValue(ctx, req.(*AllResourceValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddResourceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddResourceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddResourceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddResourceValue(ctx, req.(*AddResourceValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateResourceValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateResourceValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateResourceValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateResourceValue(ctx, req.(*UpdateResourceValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageBusiness(ctx, req.(*PageBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddBusiness(ctx, req.(*AddBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteBusiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AllBusinessValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllBusinessValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AllBusinessValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AllBusinessValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AllBusinessValue(ctx, req.(*AllBusinessValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddBusinessValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBusinessValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddBusinessValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddBusinessValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddBusinessValue(ctx, req.(*AddBusinessValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateBusinessValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBusinessValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateBusinessValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateBusinessValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateBusinessValue(ctx, req.(*UpdateBusinessValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PageTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PageTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_PageTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PageTemplate(ctx, req.(*PageTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CurrentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CurrentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CurrentTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CurrentTemplate(ctx, req.(*CurrentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AddTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AddTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_AddTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AddTemplate(ctx, req.(*AddTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTemplateVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseTemplateVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTemplateVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateTemplateVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTemplateVersion(ctx, req.(*UseTemplateVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ParseTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ParseTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ParseTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ParseTemplate(ctx, req.(*ParseTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConfigure(ctx, req.(*GetConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateConfigure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateConfigure(ctx, req.(*UpdateConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_WatchConfigure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchConfigureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).WatchConfigure(m, &serviceWatchConfigureServer{stream})
}

type Service_WatchConfigureServer interface {
	Send(*WatchConfigureReply) error
	grpc.ServerStream
}

type serviceWatchConfigureServer struct {
	grpc.ServerStream
}

func (x *serviceWatchConfigureServer) Send(m *WatchConfigureReply) error {
	return x.ServerStream.SendMsg(m)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configure.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllEnvironment",
			Handler:    _Service_AllEnvironment_Handler,
		},
		{
			MethodName: "AddEnvironment",
			Handler:    _Service_AddEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _Service_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _Service_DeleteEnvironment_Handler,
		},
		{
			MethodName: "GetEnvironmentToken",
			Handler:    _Service_GetEnvironmentToken_Handler,
		},
		{
			MethodName: "ResetEnvironmentToken",
			Handler:    _Service_ResetEnvironmentToken_Handler,
		},
		{
			MethodName: "PageServer",
			Handler:    _Service_PageServer_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _Service_GetServer_Handler,
		},
		{
			MethodName: "AddServer",
			Handler:    _Service_AddServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _Service_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _Service_DeleteServer_Handler,
		},
		{
			MethodName: "PageResource",
			Handler:    _Service_PageResource_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _Service_AddResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Service_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Service_DeleteResource_Handler,
		},
		{
			MethodName: "AllResourceServer",
			Handler:    _Service_AllResourceServer_Handler,
		},
		{
			MethodName: "AddResourceServer",
			Handler:    _Service_AddResourceServer_Handler,
		},
		{
			MethodName: "DeleteResourceServer",
			Handler:    _Service_DeleteResourceServer_Handler,
		},
		{
			MethodName: "AllServerResource",
			Handler:    _Service_AllServerResource_Handler,
		},
		{
			MethodName: "AllResourceValue",
			Handler:    _Service_AllResourceValue_Handler,
		},
		{
			MethodName: "AddResourceValue",
			Handler:    _Service_AddResourceValue_Handler,
		},
		{
			MethodName: "UpdateResourceValue",
			Handler:    _Service_UpdateResourceValue_Handler,
		},
		{
			MethodName: "PageBusiness",
			Handler:    _Service_PageBusiness_Handler,
		},
		{
			MethodName: "AddBusiness",
			Handler:    _Service_AddBusiness_Handler,
		},
		{
			MethodName: "UpdateBusiness",
			Handler:    _Service_UpdateBusiness_Handler,
		},
		{
			MethodName: "DeleteBusiness",
			Handler:    _Service_DeleteBusiness_Handler,
		},
		{
			MethodName: "AllBusinessValue",
			Handler:    _Service_AllBusinessValue_Handler,
		},
		{
			MethodName: "AddBusinessValue",
			Handler:    _Service_AddBusinessValue_Handler,
		},
		{
			MethodName: "UpdateBusinessValue",
			Handler:    _Service_UpdateBusinessValue_Handler,
		},
		{
			MethodName: "PageTemplate",
			Handler:    _Service_PageTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _Service_GetTemplate_Handler,
		},
		{
			MethodName: "CurrentTemplate",
			Handler:    _Service_CurrentTemplate_Handler,
		},
		{
			MethodName: "AddTemplate",
			Handler:    _Service_AddTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplateVersion",
			Handler:    _Service_UpdateTemplateVersion_Handler,
		},
		{
			MethodName: "ParseTemplate",
			Handler:    _Service_ParseTemplate_Handler,
		},
		{
			MethodName: "GetConfigure",
			Handler:    _Service_GetConfigure_Handler,
		},
		{
			MethodName: "UpdateConfigure",
			Handler:    _Service_UpdateConfigure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchConfigure",
			Handler:       _Service_WatchConfigure_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "configure_service.proto",
}
