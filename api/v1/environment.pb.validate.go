// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: environment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Environment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EnvironmentMultiError, or
// nil if none found.
func (m *Environment) ValidateAll() error {
	return m.validate(true)
}

func (m *Environment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := EnvironmentValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 32 {
		err := EnvironmentValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := EnvironmentValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Operator != nil {
		// no validation rules for Operator
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return EnvironmentMultiError(errors)
	}

	return nil
}

// EnvironmentMultiError is an error wrapping multiple validation errors
// returned by Environment.ValidateAll() if the designated constraints aren't met.
type EnvironmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnvironmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnvironmentMultiError) AllErrors() []error { return m }

// EnvironmentValidationError is the validation error returned by
// Environment.Validate if the designated constraints aren't met.
type EnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentValidationError) ErrorName() string { return "EnvironmentValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentValidationError{}

// Validate checks the field values on AllEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllEnvironmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllEnvironmentRequestMultiError, or nil if none found.
func (m *AllEnvironmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllEnvironmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AllEnvironmentRequestMultiError(errors)
	}

	return nil
}

// AllEnvironmentRequestMultiError is an error wrapping multiple validation
// errors returned by AllEnvironmentRequest.ValidateAll() if the designated
// constraints aren't met.
type AllEnvironmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllEnvironmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllEnvironmentRequestMultiError) AllErrors() []error { return m }

// AllEnvironmentRequestValidationError is the validation error returned by
// AllEnvironmentRequest.Validate if the designated constraints aren't met.
type AllEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllEnvironmentRequestValidationError) ErrorName() string {
	return "AllEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllEnvironmentRequestValidationError{}

// Validate checks the field values on AllEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllEnvironmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllEnvironmentResponseMultiError, or nil if none found.
func (m *AllEnvironmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllEnvironmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEnvironments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllEnvironmentResponseValidationError{
						field:  fmt.Sprintf("Environments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllEnvironmentResponseValidationError{
						field:  fmt.Sprintf("Environments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllEnvironmentResponseValidationError{
					field:  fmt.Sprintf("Environments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllEnvironmentResponseMultiError(errors)
	}

	return nil
}

// AllEnvironmentResponseMultiError is an error wrapping multiple validation
// errors returned by AllEnvironmentResponse.ValidateAll() if the designated
// constraints aren't met.
type AllEnvironmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllEnvironmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllEnvironmentResponseMultiError) AllErrors() []error { return m }

// AllEnvironmentResponseValidationError is the validation error returned by
// AllEnvironmentResponse.Validate if the designated constraints aren't met.
type AllEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllEnvironmentResponseValidationError) ErrorName() string {
	return "AllEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AllEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllEnvironmentResponseValidationError{}

// Validate checks the field values on AddEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddEnvironmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEnvironmentRequestMultiError, or nil if none found.
func (m *AddEnvironmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEnvironmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnvironment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddEnvironmentRequestValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddEnvironmentRequestValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddEnvironmentRequestValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddEnvironmentRequestMultiError(errors)
	}

	return nil
}

// AddEnvironmentRequestMultiError is an error wrapping multiple validation
// errors returned by AddEnvironmentRequest.ValidateAll() if the designated
// constraints aren't met.
type AddEnvironmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEnvironmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEnvironmentRequestMultiError) AllErrors() []error { return m }

// AddEnvironmentRequestValidationError is the validation error returned by
// AddEnvironmentRequest.Validate if the designated constraints aren't met.
type AddEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEnvironmentRequestValidationError) ErrorName() string {
	return "AddEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEnvironmentRequestValidationError{}

// Validate checks the field values on AddEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddEnvironmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEnvironmentResponseMultiError, or nil if none found.
func (m *AddEnvironmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEnvironmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddEnvironmentResponseMultiError(errors)
	}

	return nil
}

// AddEnvironmentResponseMultiError is an error wrapping multiple validation
// errors returned by AddEnvironmentResponse.ValidateAll() if the designated
// constraints aren't met.
type AddEnvironmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEnvironmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEnvironmentResponseMultiError) AllErrors() []error { return m }

// AddEnvironmentResponseValidationError is the validation error returned by
// AddEnvironmentResponse.Validate if the designated constraints aren't met.
type AddEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEnvironmentResponseValidationError) ErrorName() string {
	return "AddEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEnvironmentResponseValidationError{}

// Validate checks the field values on UpdateEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEnvironmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnvironmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEnvironmentRequestMultiError, or nil if none found.
func (m *UpdateEnvironmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnvironmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateEnvironmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEnvironment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateEnvironmentRequestValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateEnvironmentRequestValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateEnvironmentRequestValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateEnvironmentRequestMultiError(errors)
	}

	return nil
}

// UpdateEnvironmentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEnvironmentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEnvironmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnvironmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnvironmentRequestMultiError) AllErrors() []error { return m }

// UpdateEnvironmentRequestValidationError is the validation error returned by
// UpdateEnvironmentRequest.Validate if the designated constraints aren't met.
type UpdateEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvironmentRequestValidationError) ErrorName() string {
	return "UpdateEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvironmentRequestValidationError{}

// Validate checks the field values on UpdateEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEnvironmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnvironmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEnvironmentResponseMultiError, or nil if none found.
func (m *UpdateEnvironmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnvironmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEnvironmentResponseMultiError(errors)
	}

	return nil
}

// UpdateEnvironmentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEnvironmentResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateEnvironmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnvironmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnvironmentResponseMultiError) AllErrors() []error { return m }

// UpdateEnvironmentResponseValidationError is the validation error returned by
// UpdateEnvironmentResponse.Validate if the designated constraints aren't met.
type UpdateEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvironmentResponseValidationError) ErrorName() string {
	return "UpdateEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvironmentResponseValidationError{}

// Validate checks the field values on DeleteEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnvironmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnvironmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnvironmentRequestMultiError, or nil if none found.
func (m *DeleteEnvironmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnvironmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteEnvironmentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEnvironment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteEnvironmentRequestValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteEnvironmentRequestValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteEnvironmentRequestValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteEnvironmentRequestMultiError(errors)
	}

	return nil
}

// DeleteEnvironmentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEnvironmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEnvironmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnvironmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnvironmentRequestMultiError) AllErrors() []error { return m }

// DeleteEnvironmentRequestValidationError is the validation error returned by
// DeleteEnvironmentRequest.Validate if the designated constraints aren't met.
type DeleteEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvironmentRequestValidationError) ErrorName() string {
	return "DeleteEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvironmentRequestValidationError{}

// Validate checks the field values on DeleteEnvironmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnvironmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnvironmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnvironmentResponseMultiError, or nil if none found.
func (m *DeleteEnvironmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnvironmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEnvironmentResponseMultiError(errors)
	}

	return nil
}

// DeleteEnvironmentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteEnvironmentResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteEnvironmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnvironmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnvironmentResponseMultiError) AllErrors() []error { return m }

// DeleteEnvironmentResponseValidationError is the validation error returned by
// DeleteEnvironmentResponse.Validate if the designated constraints aren't met.
type DeleteEnvironmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvironmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvironmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvironmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvironmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvironmentResponseValidationError) ErrorName() string {
	return "DeleteEnvironmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnvironmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvironmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvironmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvironmentResponseValidationError{}
