// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: configure_business_value.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllBusinessValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllBusinessValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllBusinessValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllBusinessValueRequestMultiError, or nil if none found.
func (m *AllBusinessValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllBusinessValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBusinessId() <= 0 {
		err := AllBusinessValueRequestValidationError{
			field:  "BusinessId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllBusinessValueRequestMultiError(errors)
	}

	return nil
}

// AllBusinessValueRequestMultiError is an error wrapping multiple validation
// errors returned by AllBusinessValueRequest.ValidateAll() if the designated
// constraints aren't met.
type AllBusinessValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllBusinessValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllBusinessValueRequestMultiError) AllErrors() []error { return m }

// AllBusinessValueRequestValidationError is the validation error returned by
// AllBusinessValueRequest.Validate if the designated constraints aren't met.
type AllBusinessValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllBusinessValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllBusinessValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllBusinessValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllBusinessValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllBusinessValueRequestValidationError) ErrorName() string {
	return "AllBusinessValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllBusinessValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllBusinessValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllBusinessValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllBusinessValueRequestValidationError{}

// Validate checks the field values on AllBusinessValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllBusinessValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllBusinessValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllBusinessValueReplyMultiError, or nil if none found.
func (m *AllBusinessValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllBusinessValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllBusinessValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllBusinessValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllBusinessValueReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllBusinessValueReplyMultiError(errors)
	}

	return nil
}

// AllBusinessValueReplyMultiError is an error wrapping multiple validation
// errors returned by AllBusinessValueReply.ValidateAll() if the designated
// constraints aren't met.
type AllBusinessValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllBusinessValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllBusinessValueReplyMultiError) AllErrors() []error { return m }

// AllBusinessValueReplyValidationError is the validation error returned by
// AllBusinessValueReply.Validate if the designated constraints aren't met.
type AllBusinessValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllBusinessValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllBusinessValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllBusinessValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllBusinessValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllBusinessValueReplyValidationError) ErrorName() string {
	return "AllBusinessValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllBusinessValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllBusinessValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllBusinessValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllBusinessValueReplyValidationError{}

// Validate checks the field values on AddBusinessValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBusinessValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBusinessValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBusinessValueRequestMultiError, or nil if none found.
func (m *AddBusinessValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBusinessValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentId

	// no validation rules for BusinessId

	if utf8.RuneCountInString(m.GetValue()) < 7 {
		err := AddBusinessValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddBusinessValueRequestMultiError(errors)
	}

	return nil
}

// AddBusinessValueRequestMultiError is an error wrapping multiple validation
// errors returned by AddBusinessValueRequest.ValidateAll() if the designated
// constraints aren't met.
type AddBusinessValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBusinessValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBusinessValueRequestMultiError) AllErrors() []error { return m }

// AddBusinessValueRequestValidationError is the validation error returned by
// AddBusinessValueRequest.Validate if the designated constraints aren't met.
type AddBusinessValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBusinessValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBusinessValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBusinessValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBusinessValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBusinessValueRequestValidationError) ErrorName() string {
	return "AddBusinessValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBusinessValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBusinessValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBusinessValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBusinessValueRequestValidationError{}

// Validate checks the field values on UpdateBusinessValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBusinessValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBusinessValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBusinessValueRequestMultiError, or nil if none found.
func (m *UpdateBusinessValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBusinessValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateBusinessValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return UpdateBusinessValueRequestMultiError(errors)
	}

	return nil
}

// UpdateBusinessValueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateBusinessValueRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateBusinessValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBusinessValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBusinessValueRequestMultiError) AllErrors() []error { return m }

// UpdateBusinessValueRequestValidationError is the validation error returned
// by UpdateBusinessValueRequest.Validate if the designated constraints aren't met.
type UpdateBusinessValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessValueRequestValidationError) ErrorName() string {
	return "UpdateBusinessValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessValueRequestValidationError{}

// Validate checks the field values on AllBusinessValueReply_BusinessValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AllBusinessValueReply_BusinessValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllBusinessValueReply_BusinessValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AllBusinessValueReply_BusinessValueMultiError, or nil if none found.
func (m *AllBusinessValueReply_BusinessValue) ValidateAll() error {
	return m.validate(true)
}

func (m *AllBusinessValueReply_BusinessValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnvironmentId

	// no validation rules for BusinessId

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetEnvironment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllBusinessValueReply_BusinessValueValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllBusinessValueReply_BusinessValueValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllBusinessValueReply_BusinessValueValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AllBusinessValueReply_BusinessValueMultiError(errors)
	}

	return nil
}

// AllBusinessValueReply_BusinessValueMultiError is an error wrapping multiple
// validation errors returned by
// AllBusinessValueReply_BusinessValue.ValidateAll() if the designated
// constraints aren't met.
type AllBusinessValueReply_BusinessValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllBusinessValueReply_BusinessValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllBusinessValueReply_BusinessValueMultiError) AllErrors() []error { return m }

// AllBusinessValueReply_BusinessValueValidationError is the validation error
// returned by AllBusinessValueReply_BusinessValue.Validate if the designated
// constraints aren't met.
type AllBusinessValueReply_BusinessValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllBusinessValueReply_BusinessValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllBusinessValueReply_BusinessValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllBusinessValueReply_BusinessValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllBusinessValueReply_BusinessValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllBusinessValueReply_BusinessValueValidationError) ErrorName() string {
	return "AllBusinessValueReply_BusinessValueValidationError"
}

// Error satisfies the builtin error interface
func (e AllBusinessValueReply_BusinessValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllBusinessValueReply_BusinessValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllBusinessValueReply_BusinessValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllBusinessValueReply_BusinessValueValidationError{}
