// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: configure_service.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationServiceAddBusiness = "/configure.Service/AddBusiness"
const OperationServiceAddEnv = "/configure.Service/AddEnv"
const OperationServiceAddResource = "/configure.Service/AddResource"
const OperationServiceAddServer = "/configure.Service/AddServer"
const OperationServiceAddTemplate = "/configure.Service/AddTemplate"
const OperationServiceAllBusinessValue = "/configure.Service/AllBusinessValue"
const OperationServiceAllEnv = "/configure.Service/AllEnv"
const OperationServiceAllResourceServer = "/configure.Service/AllResourceServer"
const OperationServiceAllResourceValue = "/configure.Service/AllResourceValue"
const OperationServiceCompareConfigure = "/configure.Service/CompareConfigure"
const OperationServiceCompareTemplate = "/configure.Service/CompareTemplate"
const OperationServiceCurrentTemplate = "/configure.Service/CurrentTemplate"
const OperationServiceDeleteBusiness = "/configure.Service/DeleteBusiness"
const OperationServiceDeleteEnv = "/configure.Service/DeleteEnv"
const OperationServiceDeleteResource = "/configure.Service/DeleteResource"
const OperationServiceDeleteServer = "/configure.Service/DeleteServer"
const OperationServiceGetConfigure = "/configure.Service/GetConfigure"
const OperationServiceGetEnvToken = "/configure.Service/GetEnvToken"
const OperationServiceGetServer = "/configure.Service/GetServer"
const OperationServiceGetTemplate = "/configure.Service/GetTemplate"
const OperationServiceLogin = "/configure.Service/Login"
const OperationServicePageBusiness = "/configure.Service/PageBusiness"
const OperationServicePageResource = "/configure.Service/PageResource"
const OperationServicePageServer = "/configure.Service/PageServer"
const OperationServicePageServerResource = "/configure.Service/PageServerResource"
const OperationServicePageTemplate = "/configure.Service/PageTemplate"
const OperationServiceParseTemplate = "/configure.Service/ParseTemplate"
const OperationServiceParseTemplatePreview = "/configure.Service/ParseTemplatePreview"
const OperationServiceRefreshToken = "/configure.Service/RefreshToken"
const OperationServiceResetEnvToken = "/configure.Service/ResetEnvToken"
const OperationServiceSwitchTemplate = "/configure.Service/SwitchTemplate"
const OperationServiceUpdateBusiness = "/configure.Service/UpdateBusiness"
const OperationServiceUpdateBusinessValue = "/configure.Service/UpdateBusinessValue"
const OperationServiceUpdateConfigure = "/configure.Service/UpdateConfigure"
const OperationServiceUpdateEnv = "/configure.Service/UpdateEnv"
const OperationServiceUpdateResource = "/configure.Service/UpdateResource"
const OperationServiceUpdateResourceValue = "/configure.Service/UpdateResourceValue"
const OperationServiceUpdateServer = "/configure.Service/UpdateServer"

type ServiceHTTPServer interface {
	AddBusiness(context.Context, *AddBusinessRequest) (*emptypb.Empty, error)
	// AddEnv AddEnv 添加环境
	AddEnv(context.Context, *AddEnvRequest) (*AddEnvReply, error)
	AddResource(context.Context, *AddResourceRequest) (*emptypb.Empty, error)
	AddServer(context.Context, *AddServerRequest) (*AddServerReply, error)
	AddTemplate(context.Context, *AddTemplateRequest) (*emptypb.Empty, error)
	AllBusinessValue(context.Context, *AllBusinessValueRequest) (*AllBusinessValueReply, error)
	// AllEnv AllEnv 获取全部环境
	AllEnv(context.Context, *emptypb.Empty) (*AllEnvReply, error)
	AllResourceServer(context.Context, *AllResourceServerRequest) (*AllResourceServerReply, error)
	AllResourceValue(context.Context, *AllResourceValueRequest) (*AllResourceValueReply, error)
	CompareConfigure(context.Context, *CompareConfigureRequest) (*CompareConfigureReply, error)
	CompareTemplate(context.Context, *CompareTemplateRequest) (*CompareTemplateReply, error)
	CurrentTemplate(context.Context, *CurrentTemplateRequest) (*CurrentTemplateReply, error)
	DeleteBusiness(context.Context, *DeleteBusinessRequest) (*emptypb.Empty, error)
	// DeleteEnv DeleteEnv 删除环境信息
	DeleteEnv(context.Context, *DeleteEnvRequest) (*emptypb.Empty, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*emptypb.Empty, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error)
	GetConfigure(context.Context, *GetConfigureRequest) (*GetConfigureReply, error)
	// GetEnvToken GetEnvToken 获取环境token
	GetEnvToken(context.Context, *GetEnvTokenRequest) (*GetEnvTokenReply, error)
	GetServer(context.Context, *GetServerRequest) (*GetServerReply, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateReply, error)
	// Login 用户登录
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	PageBusiness(context.Context, *PageBusinessRequest) (*PageBusinessReply, error)
	PageResource(context.Context, *PageResourceRequest) (*PageResourceReply, error)
	PageServer(context.Context, *PageServerRequest) (*PageServerReply, error)
	PageServerResource(context.Context, *PageServerResourceRequest) (*PageServerResourceReply, error)
	PageTemplate(context.Context, *PageTemplateRequest) (*PageTemplateReply, error)
	ParseTemplate(context.Context, *ParseTemplateRequest) (*ParseTemplateReply, error)
	ParseTemplatePreview(context.Context, *ParseTemplatePreviewRequest) (*ParseTemplatePreviewReply, error)
	// RefreshToken RefreshToken 刷新token
	RefreshToken(context.Context, *emptypb.Empty) (*RefreshTokenReply, error)
	// ResetEnvToken ResetEnvToken 重置环境token
	ResetEnvToken(context.Context, *ResetEnvTokenRequest) (*ResetEnvTokenReply, error)
	SwitchTemplate(context.Context, *SwitchTemplateRequest) (*emptypb.Empty, error)
	UpdateBusiness(context.Context, *UpdateBusinessRequest) (*emptypb.Empty, error)
	UpdateBusinessValue(context.Context, *UpdateBusinessValueRequest) (*emptypb.Empty, error)
	UpdateConfigure(context.Context, *UpdateConfigureRequest) (*emptypb.Empty, error)
	// UpdateEnv UpdateEnv 更新环境信息
	UpdateEnv(context.Context, *UpdateEnvRequest) (*emptypb.Empty, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*emptypb.Empty, error)
	UpdateResourceValue(context.Context, *UpdateResourceValueRequest) (*emptypb.Empty, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*emptypb.Empty, error)
}

func RegisterServiceHTTPServer(s *http.Server, srv ServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/configure/v1/login", _Service_Login0_HTTP_Handler(srv))
	r.POST("/configure/v1/token/refresh", _Service_RefreshToken0_HTTP_Handler(srv))
	r.GET("/configure/v1/envs", _Service_AllEnv0_HTTP_Handler(srv))
	r.POST("/configure/v1/env", _Service_AddEnv0_HTTP_Handler(srv))
	r.PUT("/configure/v1/env", _Service_UpdateEnv0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/env", _Service_DeleteEnv0_HTTP_Handler(srv))
	r.GET("/configure/v1/env/token", _Service_GetEnvToken0_HTTP_Handler(srv))
	r.PUT("/configure/v1/env/token", _Service_ResetEnvToken0_HTTP_Handler(srv))
	r.GET("/configure/v1/servers", _Service_PageServer0_HTTP_Handler(srv))
	r.GET("/configure/v1/server", _Service_GetServer0_HTTP_Handler(srv))
	r.POST("/configure/v1/server", _Service_AddServer0_HTTP_Handler(srv))
	r.PUT("/configure/v1/server", _Service_UpdateServer0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/server", _Service_DeleteServer0_HTTP_Handler(srv))
	r.GET("/configure/v1/resources", _Service_PageResource0_HTTP_Handler(srv))
	r.POST("/configure/v1/resource", _Service_AddResource0_HTTP_Handler(srv))
	r.PUT("/configure/v1/resource", _Service_UpdateResource0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/resource", _Service_DeleteResource0_HTTP_Handler(srv))
	r.GET("/configure/v1/resource/servers", _Service_AllResourceServer0_HTTP_Handler(srv))
	r.GET("/configure/v1/server/resources", _Service_PageServerResource0_HTTP_Handler(srv))
	r.GET("/configure/v1/resource/values", _Service_AllResourceValue0_HTTP_Handler(srv))
	r.PUT("/configure/v1/resource/value", _Service_UpdateResourceValue0_HTTP_Handler(srv))
	r.GET("/configure/v1/business", _Service_PageBusiness0_HTTP_Handler(srv))
	r.POST("/configure/v1/business", _Service_AddBusiness0_HTTP_Handler(srv))
	r.PUT("/configure/v1/business", _Service_UpdateBusiness0_HTTP_Handler(srv))
	r.DELETE("/configure/v1/business", _Service_DeleteBusiness0_HTTP_Handler(srv))
	r.GET("/configure/v1/business/values", _Service_AllBusinessValue0_HTTP_Handler(srv))
	r.PUT("/configure/v1/business/value", _Service_UpdateBusinessValue0_HTTP_Handler(srv))
	r.GET("/configure/v1/templates", _Service_PageTemplate0_HTTP_Handler(srv))
	r.GET("/configure/v1/template", _Service_GetTemplate0_HTTP_Handler(srv))
	r.GET("/configure/v1/template/current", _Service_CurrentTemplate0_HTTP_Handler(srv))
	r.POST("/configure/v1/template", _Service_AddTemplate0_HTTP_Handler(srv))
	r.POST("/configure/v1/template/switch", _Service_SwitchTemplate0_HTTP_Handler(srv))
	r.POST("/configure/v1/template/compare", _Service_CompareTemplate0_HTTP_Handler(srv))
	r.POST("/configure/v1/template/preview", _Service_ParseTemplatePreview0_HTTP_Handler(srv))
	r.POST("/configure/v1/template/parse", _Service_ParseTemplate0_HTTP_Handler(srv))
	r.GET("/configure/v1/configure", _Service_GetConfigure0_HTTP_Handler(srv))
	r.PUT("/configure/v1/configure", _Service_UpdateConfigure0_HTTP_Handler(srv))
	r.POST("/configure/v1/configure/compare", _Service_CompareConfigure0_HTTP_Handler(srv))
}

func _Service_Login0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Service_RefreshToken0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceRefreshToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.RefreshToken(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AllEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllEnv(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddEnvRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddEnv(ctx, req.(*AddEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddEnvReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateEnvRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateEnv(ctx, req.(*UpdateEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteEnv0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteEnvRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteEnv)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteEnv(ctx, req.(*DeleteEnvRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_GetEnvToken0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetEnvTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetEnvToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetEnvToken(ctx, req.(*GetEnvTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetEnvTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ResetEnvToken0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetEnvTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceResetEnvToken)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ResetEnvToken(ctx, req.(*ResetEnvTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResetEnvTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PageServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageServer(ctx, req.(*PageServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageServerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetServer(ctx, req.(*GetServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetServerReply)
		return ctx.Result(200, reply.Server)
	}
}

func _Service_AddServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddServer(ctx, req.(*AddServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddServerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateServer(ctx, req.(*UpdateServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteServer(ctx, req.(*DeleteServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageResource(ctx, req.(*PageResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddResource(ctx, req.(*AddResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResource(ctx, req.(*UpdateResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteResource(ctx, req.(*DeleteResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllResourceServer0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllResourceServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllResourceServer)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllResourceServer(ctx, req.(*AllResourceServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllResourceServerReply)
		return ctx.Result(200, reply)
	}
}

func _Service_PageServerResource0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageServerResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageServerResource)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageServerResource(ctx, req.(*PageServerResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageServerResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AllResourceValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllResourceValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllResourceValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllResourceValue(ctx, req.(*AllResourceValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllResourceValueReply)
		return ctx.Result(200, reply.List)
	}
}

func _Service_UpdateResourceValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateResourceValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateResourceValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateResourceValue(ctx, req.(*UpdateResourceValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageBusinessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageBusiness(ctx, req.(*PageBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageBusinessReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddBusinessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddBusiness(ctx, req.(*AddBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBusinessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBusiness(ctx, req.(*UpdateBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_DeleteBusiness0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBusinessRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceDeleteBusiness)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.DeleteBusiness(ctx, req.(*DeleteBusinessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_AllBusinessValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllBusinessValueRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAllBusinessValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AllBusinessValue(ctx, req.(*AllBusinessValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllBusinessValueReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateBusinessValue0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBusinessValueRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateBusinessValue)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateBusinessValue(ctx, req.(*UpdateBusinessValueRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_PageTemplate0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServicePageTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.PageTemplate(ctx, req.(*PageTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetTemplate0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetTemplate(ctx, req.(*GetTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Service_CurrentTemplate0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CurrentTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceCurrentTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CurrentTemplate(ctx, req.(*CurrentTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CurrentTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Service_AddTemplate0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceAddTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.AddTemplate(ctx, req.(*AddTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_SwitchTemplate0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SwitchTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceSwitchTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.SwitchTemplate(ctx, req.(*SwitchTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_CompareTemplate0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompareTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceCompareTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CompareTemplate(ctx, req.(*CompareTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompareTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ParseTemplatePreview0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ParseTemplatePreviewRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceParseTemplatePreview)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ParseTemplatePreview(ctx, req.(*ParseTemplatePreviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ParseTemplatePreviewReply)
		return ctx.Result(200, reply)
	}
}

func _Service_ParseTemplate0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ParseTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceParseTemplate)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ParseTemplate(ctx, req.(*ParseTemplateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ParseTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Service_GetConfigure0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConfigureRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceGetConfigure)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetConfigure(ctx, req.(*GetConfigureRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetConfigureReply)
		return ctx.Result(200, reply)
	}
}

func _Service_UpdateConfigure0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateConfigureRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceUpdateConfigure)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.UpdateConfigure(ctx, req.(*UpdateConfigureRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Service_CompareConfigure0_HTTP_Handler(srv ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CompareConfigureRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationServiceCompareConfigure)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.CompareConfigure(ctx, req.(*CompareConfigureRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CompareConfigureReply)
		return ctx.Result(200, reply)
	}
}

type ServiceHTTPClient interface {
	AddBusiness(ctx context.Context, req *AddBusinessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddEnv(ctx context.Context, req *AddEnvRequest, opts ...http.CallOption) (rsp *AddEnvReply, err error)
	AddResource(ctx context.Context, req *AddResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AddServer(ctx context.Context, req *AddServerRequest, opts ...http.CallOption) (rsp *AddServerReply, err error)
	AddTemplate(ctx context.Context, req *AddTemplateRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AllBusinessValue(ctx context.Context, req *AllBusinessValueRequest, opts ...http.CallOption) (rsp *AllBusinessValueReply, err error)
	AllEnv(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *AllEnvReply, err error)
	AllResourceServer(ctx context.Context, req *AllResourceServerRequest, opts ...http.CallOption) (rsp *AllResourceServerReply, err error)
	AllResourceValue(ctx context.Context, req *AllResourceValueRequest, opts ...http.CallOption) (rsp *AllResourceValueReply, err error)
	CompareConfigure(ctx context.Context, req *CompareConfigureRequest, opts ...http.CallOption) (rsp *CompareConfigureReply, err error)
	CompareTemplate(ctx context.Context, req *CompareTemplateRequest, opts ...http.CallOption) (rsp *CompareTemplateReply, err error)
	CurrentTemplate(ctx context.Context, req *CurrentTemplateRequest, opts ...http.CallOption) (rsp *CurrentTemplateReply, err error)
	DeleteBusiness(ctx context.Context, req *DeleteBusinessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteEnv(ctx context.Context, req *DeleteEnvRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteResource(ctx context.Context, req *DeleteResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteServer(ctx context.Context, req *DeleteServerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetConfigure(ctx context.Context, req *GetConfigureRequest, opts ...http.CallOption) (rsp *GetConfigureReply, err error)
	GetEnvToken(ctx context.Context, req *GetEnvTokenRequest, opts ...http.CallOption) (rsp *GetEnvTokenReply, err error)
	GetServer(ctx context.Context, req *GetServerRequest, opts ...http.CallOption) (rsp *GetServerReply, err error)
	GetTemplate(ctx context.Context, req *GetTemplateRequest, opts ...http.CallOption) (rsp *GetTemplateReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	PageBusiness(ctx context.Context, req *PageBusinessRequest, opts ...http.CallOption) (rsp *PageBusinessReply, err error)
	PageResource(ctx context.Context, req *PageResourceRequest, opts ...http.CallOption) (rsp *PageResourceReply, err error)
	PageServer(ctx context.Context, req *PageServerRequest, opts ...http.CallOption) (rsp *PageServerReply, err error)
	PageServerResource(ctx context.Context, req *PageServerResourceRequest, opts ...http.CallOption) (rsp *PageServerResourceReply, err error)
	PageTemplate(ctx context.Context, req *PageTemplateRequest, opts ...http.CallOption) (rsp *PageTemplateReply, err error)
	ParseTemplate(ctx context.Context, req *ParseTemplateRequest, opts ...http.CallOption) (rsp *ParseTemplateReply, err error)
	ParseTemplatePreview(ctx context.Context, req *ParseTemplatePreviewRequest, opts ...http.CallOption) (rsp *ParseTemplatePreviewReply, err error)
	RefreshToken(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *RefreshTokenReply, err error)
	ResetEnvToken(ctx context.Context, req *ResetEnvTokenRequest, opts ...http.CallOption) (rsp *ResetEnvTokenReply, err error)
	SwitchTemplate(ctx context.Context, req *SwitchTemplateRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateBusiness(ctx context.Context, req *UpdateBusinessRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateBusinessValue(ctx context.Context, req *UpdateBusinessValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateConfigure(ctx context.Context, req *UpdateConfigureRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateEnv(ctx context.Context, req *UpdateEnvRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateResource(ctx context.Context, req *UpdateResourceRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateResourceValue(ctx context.Context, req *UpdateResourceValueRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateServer(ctx context.Context, req *UpdateServerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewServiceHTTPClient(client *http.Client) ServiceHTTPClient {
	return &ServiceHTTPClientImpl{client}
}

func (c *ServiceHTTPClientImpl) AddBusiness(ctx context.Context, in *AddBusinessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddEnv(ctx context.Context, in *AddEnvRequest, opts ...http.CallOption) (*AddEnvReply, error) {
	var out AddEnvReply
	pattern := "/configure/v1/env"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddResource(ctx context.Context, in *AddResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddServer(ctx context.Context, in *AddServerRequest, opts ...http.CallOption) (*AddServerReply, error) {
	var out AddServerReply
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AddTemplate(ctx context.Context, in *AddTemplateRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceAddTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllBusinessValue(ctx context.Context, in *AllBusinessValueRequest, opts ...http.CallOption) (*AllBusinessValueReply, error) {
	var out AllBusinessValueReply
	pattern := "/configure/v1/business/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllBusinessValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllEnv(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*AllEnvReply, error) {
	var out AllEnvReply
	pattern := "/configure/v1/envs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllResourceServer(ctx context.Context, in *AllResourceServerRequest, opts ...http.CallOption) (*AllResourceServerReply, error) {
	var out AllResourceServerReply
	pattern := "/configure/v1/resource/servers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllResourceServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) AllResourceValue(ctx context.Context, in *AllResourceValueRequest, opts ...http.CallOption) (*AllResourceValueReply, error) {
	var out AllResourceValueReply
	pattern := "/configure/v1/resource/values"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceAllResourceValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.List, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) CompareConfigure(ctx context.Context, in *CompareConfigureRequest, opts ...http.CallOption) (*CompareConfigureReply, error) {
	var out CompareConfigureReply
	pattern := "/configure/v1/configure/compare"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceCompareConfigure))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) CompareTemplate(ctx context.Context, in *CompareTemplateRequest, opts ...http.CallOption) (*CompareTemplateReply, error) {
	var out CompareTemplateReply
	pattern := "/configure/v1/template/compare"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceCompareTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) CurrentTemplate(ctx context.Context, in *CurrentTemplateRequest, opts ...http.CallOption) (*CurrentTemplateReply, error) {
	var out CurrentTemplateReply
	pattern := "/configure/v1/template/current"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceCurrentTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteBusiness(ctx context.Context, in *DeleteBusinessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteEnv(ctx context.Context, in *DeleteEnvRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/env"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/resource"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceDeleteServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetConfigure(ctx context.Context, in *GetConfigureRequest, opts ...http.CallOption) (*GetConfigureReply, error) {
	var out GetConfigureReply
	pattern := "/configure/v1/configure"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetConfigure))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetEnvToken(ctx context.Context, in *GetEnvTokenRequest, opts ...http.CallOption) (*GetEnvTokenReply, error) {
	var out GetEnvTokenReply
	pattern := "/configure/v1/env/token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetEnvToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetServer(ctx context.Context, in *GetServerRequest, opts ...http.CallOption) (*GetServerReply, error) {
	var out GetServerReply
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Server, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...http.CallOption) (*GetTemplateReply, error) {
	var out GetTemplateReply
	pattern := "/configure/v1/template"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceGetTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/configure/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageBusiness(ctx context.Context, in *PageBusinessRequest, opts ...http.CallOption) (*PageBusinessReply, error) {
	var out PageBusinessReply
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageResource(ctx context.Context, in *PageResourceRequest, opts ...http.CallOption) (*PageResourceReply, error) {
	var out PageResourceReply
	pattern := "/configure/v1/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageServer(ctx context.Context, in *PageServerRequest, opts ...http.CallOption) (*PageServerReply, error) {
	var out PageServerReply
	pattern := "/configure/v1/servers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageServerResource(ctx context.Context, in *PageServerResourceRequest, opts ...http.CallOption) (*PageServerResourceReply, error) {
	var out PageServerResourceReply
	pattern := "/configure/v1/server/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageServerResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) PageTemplate(ctx context.Context, in *PageTemplateRequest, opts ...http.CallOption) (*PageTemplateReply, error) {
	var out PageTemplateReply
	pattern := "/configure/v1/templates"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServicePageTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ParseTemplate(ctx context.Context, in *ParseTemplateRequest, opts ...http.CallOption) (*ParseTemplateReply, error) {
	var out ParseTemplateReply
	pattern := "/configure/v1/template/parse"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceParseTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ParseTemplatePreview(ctx context.Context, in *ParseTemplatePreviewRequest, opts ...http.CallOption) (*ParseTemplatePreviewReply, error) {
	var out ParseTemplatePreviewReply
	pattern := "/configure/v1/template/preview"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceParseTemplatePreview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) RefreshToken(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*RefreshTokenReply, error) {
	var out RefreshTokenReply
	pattern := "/configure/v1/token/refresh"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationServiceRefreshToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) ResetEnvToken(ctx context.Context, in *ResetEnvTokenRequest, opts ...http.CallOption) (*ResetEnvTokenReply, error) {
	var out ResetEnvTokenReply
	pattern := "/configure/v1/env/token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceResetEnvToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) SwitchTemplate(ctx context.Context, in *SwitchTemplateRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/template/switch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceSwitchTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateBusiness(ctx context.Context, in *UpdateBusinessRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateBusiness))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateBusinessValue(ctx context.Context, in *UpdateBusinessValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/business/value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateBusinessValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateConfigure(ctx context.Context, in *UpdateConfigureRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/configure"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateConfigure))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateEnv(ctx context.Context, in *UpdateEnvRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/env"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateEnv))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateResourceValue(ctx context.Context, in *UpdateResourceValueRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/resource/value"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateResourceValue))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ServiceHTTPClientImpl) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/configure/v1/server"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationServiceUpdateServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
