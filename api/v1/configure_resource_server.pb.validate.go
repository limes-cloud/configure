// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: configure_resource_server.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllResourceServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllResourceServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResourceServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllResourceServerRequestMultiError, or nil if none found.
func (m *AllResourceServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResourceServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := AllResourceServerRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllResourceServerRequestMultiError(errors)
	}

	return nil
}

// AllResourceServerRequestMultiError is an error wrapping multiple validation
// errors returned by AllResourceServerRequest.ValidateAll() if the designated
// constraints aren't met.
type AllResourceServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResourceServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResourceServerRequestMultiError) AllErrors() []error { return m }

// AllResourceServerRequestValidationError is the validation error returned by
// AllResourceServerRequest.Validate if the designated constraints aren't met.
type AllResourceServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResourceServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResourceServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResourceServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResourceServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResourceServerRequestValidationError) ErrorName() string {
	return "AllResourceServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllResourceServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResourceServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResourceServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResourceServerRequestValidationError{}

// Validate checks the field values on AllResourceServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllResourceServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResourceServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllResourceServerReplyMultiError, or nil if none found.
func (m *AllResourceServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResourceServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllResourceServerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllResourceServerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllResourceServerReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllResourceServerReplyMultiError(errors)
	}

	return nil
}

// AllResourceServerReplyMultiError is an error wrapping multiple validation
// errors returned by AllResourceServerReply.ValidateAll() if the designated
// constraints aren't met.
type AllResourceServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResourceServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResourceServerReplyMultiError) AllErrors() []error { return m }

// AllResourceServerReplyValidationError is the validation error returned by
// AllResourceServerReply.Validate if the designated constraints aren't met.
type AllResourceServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResourceServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResourceServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResourceServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResourceServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResourceServerReplyValidationError) ErrorName() string {
	return "AllResourceServerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllResourceServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResourceServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResourceServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResourceServerReplyValidationError{}

// Validate checks the field values on AllServerResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllServerResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllServerResourceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllServerResourceRequestMultiError, or nil if none found.
func (m *AllServerResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllServerResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetServerId() <= 0 {
		err := AllServerResourceRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllServerResourceRequestMultiError(errors)
	}

	return nil
}

// AllServerResourceRequestMultiError is an error wrapping multiple validation
// errors returned by AllServerResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type AllServerResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllServerResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllServerResourceRequestMultiError) AllErrors() []error { return m }

// AllServerResourceRequestValidationError is the validation error returned by
// AllServerResourceRequest.Validate if the designated constraints aren't met.
type AllServerResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllServerResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllServerResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllServerResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllServerResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllServerResourceRequestValidationError) ErrorName() string {
	return "AllServerResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllServerResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllServerResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllServerResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllServerResourceRequestValidationError{}

// Validate checks the field values on AllServerResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllServerResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllServerResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllServerResourceReplyMultiError, or nil if none found.
func (m *AllServerResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllServerResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllServerResourceReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllServerResourceReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllServerResourceReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllServerResourceReplyMultiError(errors)
	}

	return nil
}

// AllServerResourceReplyMultiError is an error wrapping multiple validation
// errors returned by AllServerResourceReply.ValidateAll() if the designated
// constraints aren't met.
type AllServerResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllServerResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllServerResourceReplyMultiError) AllErrors() []error { return m }

// AllServerResourceReplyValidationError is the validation error returned by
// AllServerResourceReply.Validate if the designated constraints aren't met.
type AllServerResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllServerResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllServerResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllServerResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllServerResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllServerResourceReplyValidationError) ErrorName() string {
	return "AllServerResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllServerResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllServerResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllServerResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllServerResourceReplyValidationError{}

// Validate checks the field values on AddResourceServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceServerRequestMultiError, or nil if none found.
func (m *AddResourceServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := AddResourceServerRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetServerId() <= 0 {
		err := AddResourceServerRequestValidationError{
			field:  "ServerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddResourceServerRequestMultiError(errors)
	}

	return nil
}

// AddResourceServerRequestMultiError is an error wrapping multiple validation
// errors returned by AddResourceServerRequest.ValidateAll() if the designated
// constraints aren't met.
type AddResourceServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceServerRequestMultiError) AllErrors() []error { return m }

// AddResourceServerRequestValidationError is the validation error returned by
// AddResourceServerRequest.Validate if the designated constraints aren't met.
type AddResourceServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceServerRequestValidationError) ErrorName() string {
	return "AddResourceServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceServerRequestValidationError{}

// Validate checks the field values on DeleteResourceServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteResourceServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResourceServerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteResourceServerRequestMultiError, or nil if none found.
func (m *DeleteResourceServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResourceServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteResourceServerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteResourceServerRequestMultiError(errors)
	}

	return nil
}

// DeleteResourceServerRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteResourceServerRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteResourceServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResourceServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResourceServerRequestMultiError) AllErrors() []error { return m }

// DeleteResourceServerRequestValidationError is the validation error returned
// by DeleteResourceServerRequest.Validate if the designated constraints
// aren't met.
type DeleteResourceServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResourceServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResourceServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResourceServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResourceServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResourceServerRequestValidationError) ErrorName() string {
	return "DeleteResourceServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteResourceServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResourceServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResourceServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResourceServerRequestValidationError{}

// Validate checks the field values on AllResourceServerReply_ResourceServer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AllResourceServerReply_ResourceServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResourceServerReply_ResourceServer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AllResourceServerReply_ResourceServerMultiError, or nil if none found.
func (m *AllResourceServerReply_ResourceServer) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResourceServerReply_ResourceServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for ServerId

	if all {
		switch v := interface{}(m.GetServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllResourceServerReply_ResourceServerValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllResourceServerReply_ResourceServerValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllResourceServerReply_ResourceServerValidationError{
				field:  "Server",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AllResourceServerReply_ResourceServerMultiError(errors)
	}

	return nil
}

// AllResourceServerReply_ResourceServerMultiError is an error wrapping
// multiple validation errors returned by
// AllResourceServerReply_ResourceServer.ValidateAll() if the designated
// constraints aren't met.
type AllResourceServerReply_ResourceServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResourceServerReply_ResourceServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResourceServerReply_ResourceServerMultiError) AllErrors() []error { return m }

// AllResourceServerReply_ResourceServerValidationError is the validation error
// returned by AllResourceServerReply_ResourceServer.Validate if the
// designated constraints aren't met.
type AllResourceServerReply_ResourceServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResourceServerReply_ResourceServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResourceServerReply_ResourceServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResourceServerReply_ResourceServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResourceServerReply_ResourceServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResourceServerReply_ResourceServerValidationError) ErrorName() string {
	return "AllResourceServerReply_ResourceServerValidationError"
}

// Error satisfies the builtin error interface
func (e AllResourceServerReply_ResourceServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResourceServerReply_ResourceServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResourceServerReply_ResourceServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResourceServerReply_ResourceServerValidationError{}

// Validate checks the field values on AllServerResourceReply_ResourceServer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AllServerResourceReply_ResourceServer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllServerResourceReply_ResourceServer
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AllServerResourceReply_ResourceServerMultiError, or nil if none found.
func (m *AllServerResourceReply_ResourceServer) ValidateAll() error {
	return m.validate(true)
}

func (m *AllServerResourceReply_ResourceServer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for ServerId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllServerResourceReply_ResourceServerValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllServerResourceReply_ResourceServerValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllServerResourceReply_ResourceServerValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AllServerResourceReply_ResourceServerMultiError(errors)
	}

	return nil
}

// AllServerResourceReply_ResourceServerMultiError is an error wrapping
// multiple validation errors returned by
// AllServerResourceReply_ResourceServer.ValidateAll() if the designated
// constraints aren't met.
type AllServerResourceReply_ResourceServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllServerResourceReply_ResourceServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllServerResourceReply_ResourceServerMultiError) AllErrors() []error { return m }

// AllServerResourceReply_ResourceServerValidationError is the validation error
// returned by AllServerResourceReply_ResourceServer.Validate if the
// designated constraints aren't met.
type AllServerResourceReply_ResourceServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllServerResourceReply_ResourceServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllServerResourceReply_ResourceServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllServerResourceReply_ResourceServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllServerResourceReply_ResourceServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllServerResourceReply_ResourceServerValidationError) ErrorName() string {
	return "AllServerResourceReply_ResourceServerValidationError"
}

// Error satisfies the builtin error interface
func (e AllServerResourceReply_ResourceServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllServerResourceReply_ResourceServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllServerResourceReply_ResourceServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllServerResourceReply_ResourceServerValidationError{}
