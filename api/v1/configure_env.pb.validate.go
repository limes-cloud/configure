// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: configure_env.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllEnvReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllEnvReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllEnvReplyMultiError, or
// nil if none found.
func (m *AllEnvReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllEnvReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllEnvReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllEnvReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllEnvReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllEnvReplyMultiError(errors)
	}

	return nil
}

// AllEnvReplyMultiError is an error wrapping multiple validation errors
// returned by AllEnvReply.ValidateAll() if the designated constraints aren't met.
type AllEnvReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllEnvReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllEnvReplyMultiError) AllErrors() []error { return m }

// AllEnvReplyValidationError is the validation error returned by
// AllEnvReply.Validate if the designated constraints aren't met.
type AllEnvReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllEnvReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllEnvReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllEnvReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllEnvReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllEnvReplyValidationError) ErrorName() string { return "AllEnvReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllEnvReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllEnvReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllEnvReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllEnvReplyValidationError{}

// Validate checks the field values on AddEnvRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddEnvRequestMultiError, or
// nil if none found.
func (m *AddEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := AddEnvRequestValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := AddEnvRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := AddEnvRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddEnvRequestMultiError(errors)
	}

	return nil
}

// AddEnvRequestMultiError is an error wrapping multiple validation errors
// returned by AddEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type AddEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEnvRequestMultiError) AllErrors() []error { return m }

// AddEnvRequestValidationError is the validation error returned by
// AddEnvRequest.Validate if the designated constraints aren't met.
type AddEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEnvRequestValidationError) ErrorName() string { return "AddEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEnvRequestValidationError{}

// Validate checks the field values on UpdateEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEnvRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEnvRequestMultiError, or nil if none found.
func (m *UpdateEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateEnvRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := UpdateEnvRequestValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := UpdateEnvRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := UpdateEnvRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return UpdateEnvRequestMultiError(errors)
	}

	return nil
}

// UpdateEnvRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEnvRequestMultiError) AllErrors() []error { return m }

// UpdateEnvRequestValidationError is the validation error returned by
// UpdateEnvRequest.Validate if the designated constraints aren't met.
type UpdateEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEnvRequestValidationError) ErrorName() string { return "UpdateEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEnvRequestValidationError{}

// Validate checks the field values on GetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEnvTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEnvTokenRequestMultiError, or nil if none found.
func (m *GetEnvTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnvTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEnvTokenRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEnvTokenRequestMultiError(errors)
	}

	return nil
}

// GetEnvTokenRequestMultiError is an error wrapping multiple validation errors
// returned by GetEnvTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEnvTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnvTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnvTokenRequestMultiError) AllErrors() []error { return m }

// GetEnvTokenRequestValidationError is the validation error returned by
// GetEnvTokenRequest.Validate if the designated constraints aren't met.
type GetEnvTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvTokenRequestValidationError) ErrorName() string {
	return "GetEnvTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEnvTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvTokenRequestValidationError{}

// Validate checks the field values on GetEnvTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEnvTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEnvTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEnvTokenReplyMultiError, or nil if none found.
func (m *GetEnvTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEnvTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return GetEnvTokenReplyMultiError(errors)
	}

	return nil
}

// GetEnvTokenReplyMultiError is an error wrapping multiple validation errors
// returned by GetEnvTokenReply.ValidateAll() if the designated constraints
// aren't met.
type GetEnvTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEnvTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEnvTokenReplyMultiError) AllErrors() []error { return m }

// GetEnvTokenReplyValidationError is the validation error returned by
// GetEnvTokenReply.Validate if the designated constraints aren't met.
type GetEnvTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvTokenReplyValidationError) ErrorName() string { return "GetEnvTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetEnvTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvTokenReplyValidationError{}

// Validate checks the field values on ResetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetEnvTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetEnvTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetEnvTokenRequestMultiError, or nil if none found.
func (m *ResetEnvTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetEnvTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := ResetEnvTokenRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetEnvTokenRequestMultiError(errors)
	}

	return nil
}

// ResetEnvTokenRequestMultiError is an error wrapping multiple validation
// errors returned by ResetEnvTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetEnvTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetEnvTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetEnvTokenRequestMultiError) AllErrors() []error { return m }

// ResetEnvTokenRequestValidationError is the validation error returned by
// ResetEnvTokenRequest.Validate if the designated constraints aren't met.
type ResetEnvTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetEnvTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetEnvTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetEnvTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetEnvTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetEnvTokenRequestValidationError) ErrorName() string {
	return "ResetEnvTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetEnvTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetEnvTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetEnvTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetEnvTokenRequestValidationError{}

// Validate checks the field values on ResetEnvTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetEnvTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetEnvTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetEnvTokenReplyMultiError, or nil if none found.
func (m *ResetEnvTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetEnvTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ResetEnvTokenReplyMultiError(errors)
	}

	return nil
}

// ResetEnvTokenReplyMultiError is an error wrapping multiple validation errors
// returned by ResetEnvTokenReply.ValidateAll() if the designated constraints
// aren't met.
type ResetEnvTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetEnvTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetEnvTokenReplyMultiError) AllErrors() []error { return m }

// ResetEnvTokenReplyValidationError is the validation error returned by
// ResetEnvTokenReply.Validate if the designated constraints aren't met.
type ResetEnvTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetEnvTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetEnvTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetEnvTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetEnvTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetEnvTokenReplyValidationError) ErrorName() string {
	return "ResetEnvTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ResetEnvTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetEnvTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetEnvTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetEnvTokenReplyValidationError{}

// Validate checks the field values on DeleteEnvRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteEnvRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEnvRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEnvRequestMultiError, or nil if none found.
func (m *DeleteEnvRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEnvRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteEnvRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEnvRequestMultiError(errors)
	}

	return nil
}

// DeleteEnvRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEnvRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteEnvRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEnvRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEnvRequestMultiError) AllErrors() []error { return m }

// DeleteEnvRequestValidationError is the validation error returned by
// DeleteEnvRequest.Validate if the designated constraints aren't met.
type DeleteEnvRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvRequestValidationError) ErrorName() string { return "DeleteEnvRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteEnvRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvRequestValidationError{}

// Validate checks the field values on AllEnvReply_Env with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllEnvReply_Env) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllEnvReply_Env with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllEnvReply_EnvMultiError, or nil if none found.
func (m *AllEnvReply_Env) ValidateAll() error {
	return m.validate(true)
}

func (m *AllEnvReply_Env) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AllEnvReply_EnvMultiError(errors)
	}

	return nil
}

// AllEnvReply_EnvMultiError is an error wrapping multiple validation errors
// returned by AllEnvReply_Env.ValidateAll() if the designated constraints
// aren't met.
type AllEnvReply_EnvMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllEnvReply_EnvMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllEnvReply_EnvMultiError) AllErrors() []error { return m }

// AllEnvReply_EnvValidationError is the validation error returned by
// AllEnvReply_Env.Validate if the designated constraints aren't met.
type AllEnvReply_EnvValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllEnvReply_EnvValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllEnvReply_EnvValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllEnvReply_EnvValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllEnvReply_EnvValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllEnvReply_EnvValidationError) ErrorName() string { return "AllEnvReply_EnvValidationError" }

// Error satisfies the builtin error interface
func (e AllEnvReply_EnvValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllEnvReply_Env.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllEnvReply_EnvValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllEnvReply_EnvValidationError{}
