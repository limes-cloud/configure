// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: configure_resource_value.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllResourceValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllResourceValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResourceValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllResourceValueRequestMultiError, or nil if none found.
func (m *AllResourceValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResourceValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResourceId() <= 0 {
		err := AllResourceValueRequestValidationError{
			field:  "ResourceId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AllResourceValueRequestMultiError(errors)
	}

	return nil
}

// AllResourceValueRequestMultiError is an error wrapping multiple validation
// errors returned by AllResourceValueRequest.ValidateAll() if the designated
// constraints aren't met.
type AllResourceValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResourceValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResourceValueRequestMultiError) AllErrors() []error { return m }

// AllResourceValueRequestValidationError is the validation error returned by
// AllResourceValueRequest.Validate if the designated constraints aren't met.
type AllResourceValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResourceValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResourceValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResourceValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResourceValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResourceValueRequestValidationError) ErrorName() string {
	return "AllResourceValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AllResourceValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResourceValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResourceValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResourceValueRequestValidationError{}

// Validate checks the field values on AllResourceValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AllResourceValueReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResourceValueReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllResourceValueReplyMultiError, or nil if none found.
func (m *AllResourceValueReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResourceValueReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllResourceValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllResourceValueReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllResourceValueReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllResourceValueReplyMultiError(errors)
	}

	return nil
}

// AllResourceValueReplyMultiError is an error wrapping multiple validation
// errors returned by AllResourceValueReply.ValidateAll() if the designated
// constraints aren't met.
type AllResourceValueReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResourceValueReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResourceValueReplyMultiError) AllErrors() []error { return m }

// AllResourceValueReplyValidationError is the validation error returned by
// AllResourceValueReply.Validate if the designated constraints aren't met.
type AllResourceValueReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResourceValueReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResourceValueReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResourceValueReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResourceValueReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResourceValueReplyValidationError) ErrorName() string {
	return "AllResourceValueReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AllResourceValueReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResourceValueReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResourceValueReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResourceValueReplyValidationError{}

// Validate checks the field values on AddResourceValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddResourceValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddResourceValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddResourceValueRequestMultiError, or nil if none found.
func (m *AddResourceValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddResourceValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnvironmentId

	// no validation rules for ResourceId

	if utf8.RuneCountInString(m.GetValues()) < 7 {
		err := AddResourceValueRequestValidationError{
			field:  "Values",
			reason: "value length must be at least 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddResourceValueRequestMultiError(errors)
	}

	return nil
}

// AddResourceValueRequestMultiError is an error wrapping multiple validation
// errors returned by AddResourceValueRequest.ValidateAll() if the designated
// constraints aren't met.
type AddResourceValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddResourceValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddResourceValueRequestMultiError) AllErrors() []error { return m }

// AddResourceValueRequestValidationError is the validation error returned by
// AddResourceValueRequest.Validate if the designated constraints aren't met.
type AddResourceValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddResourceValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddResourceValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddResourceValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddResourceValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddResourceValueRequestValidationError) ErrorName() string {
	return "AddResourceValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddResourceValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddResourceValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddResourceValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddResourceValueRequestValidationError{}

// Validate checks the field values on UpdateResourceValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateResourceValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateResourceValueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateResourceValueRequestMultiError, or nil if none found.
func (m *UpdateResourceValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateResourceValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateResourceValueRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Values

	if len(errors) > 0 {
		return UpdateResourceValueRequestMultiError(errors)
	}

	return nil
}

// UpdateResourceValueRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateResourceValueRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateResourceValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateResourceValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateResourceValueRequestMultiError) AllErrors() []error { return m }

// UpdateResourceValueRequestValidationError is the validation error returned
// by UpdateResourceValueRequest.Validate if the designated constraints aren't met.
type UpdateResourceValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateResourceValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateResourceValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateResourceValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateResourceValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateResourceValueRequestValidationError) ErrorName() string {
	return "UpdateResourceValueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateResourceValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateResourceValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateResourceValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateResourceValueRequestValidationError{}

// Validate checks the field values on AllResourceValueReply_ResourceValue with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AllResourceValueReply_ResourceValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResourceValueReply_ResourceValue
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AllResourceValueReply_ResourceValueMultiError, or nil if none found.
func (m *AllResourceValueReply_ResourceValue) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResourceValueReply_ResourceValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EnvironmentId

	// no validation rules for ResourceId

	// no validation rules for Values

	if all {
		switch v := interface{}(m.GetEnvironment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AllResourceValueReply_ResourceValueValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AllResourceValueReply_ResourceValueValidationError{
					field:  "Environment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnvironment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AllResourceValueReply_ResourceValueValidationError{
				field:  "Environment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AllResourceValueReply_ResourceValueMultiError(errors)
	}

	return nil
}

// AllResourceValueReply_ResourceValueMultiError is an error wrapping multiple
// validation errors returned by
// AllResourceValueReply_ResourceValue.ValidateAll() if the designated
// constraints aren't met.
type AllResourceValueReply_ResourceValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResourceValueReply_ResourceValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResourceValueReply_ResourceValueMultiError) AllErrors() []error { return m }

// AllResourceValueReply_ResourceValueValidationError is the validation error
// returned by AllResourceValueReply_ResourceValue.Validate if the designated
// constraints aren't met.
type AllResourceValueReply_ResourceValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResourceValueReply_ResourceValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResourceValueReply_ResourceValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResourceValueReply_ResourceValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResourceValueReply_ResourceValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResourceValueReply_ResourceValueValidationError) ErrorName() string {
	return "AllResourceValueReply_ResourceValueValidationError"
}

// Error satisfies the builtin error interface
func (e AllResourceValueReply_ResourceValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResourceValueReply_ResourceValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResourceValueReply_ResourceValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResourceValueReply_ResourceValueValidationError{}
