// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsDatabaseError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DatabaseError.String() && e.Code == 200
}

func DatabaseErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_DatabaseError.String(), "数据库错误:"+fmt.Sprintf(format, args...))
}

func DatabaseError() *errors.Error {
	return errors.New(200, ErrorReason_DatabaseError.String(), "数据库错误")
}

func IsTransformError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TransformError.String() && e.Code == 200
}

func TransformErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_TransformError.String(), "数据转换失败:"+fmt.Sprintf(format, args...))
}

func TransformError() *errors.Error {
	return errors.New(200, ErrorReason_TransformError.String(), "数据转换失败")
}

func IsAlreadyExistsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExistsError.String() && e.Code == 200
}

func AlreadyExistsErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistsError.String(), "数据已存在:"+fmt.Sprintf(format, args...))
}

func AlreadyExistsError() *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExistsError.String(), "数据已存在")
}

func IsParamsError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParamsError.String() && e.Code == 200
}

func ParamsErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ParamsError.String(), "参数错误:"+fmt.Sprintf(format, args...))
}

func ParamsError() *errors.Error {
	return errors.New(200, ErrorReason_ParamsError.String(), "参数错误")
}

func IsNotRecordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotRecordError.String() && e.Code == 200
}

func NotRecordErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_NotRecordError.String(), "暂无数据记录:"+fmt.Sprintf(format, args...))
}

func NotRecordError() *errors.Error {
	return errors.New(200, ErrorReason_NotRecordError.String(), "暂无数据记录")
}

func IsResourceFormatValueError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ResourceFormatValueError.String() && e.Code == 200
}

func ResourceFormatValueErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ResourceFormatValueError.String(), "资源字段值格式错误:"+fmt.Sprintf(format, args...))
}

func ResourceFormatValueError() *errors.Error {
	return errors.New(200, ErrorReason_ResourceFormatValueError.String(), "资源字段值格式错误")
}

func IsCheckTemplateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CheckTemplateError.String() && e.Code == 200
}

func CheckTemplateErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_CheckTemplateError.String(), "模板检测出现错误:"+fmt.Sprintf(format, args...))
}

func CheckTemplateError() *errors.Error {
	return errors.New(200, ErrorReason_CheckTemplateError.String(), "模板检测出现错误")
}

func IsParseTemplateError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseTemplateError.String() && e.Code == 200
}

func ParseTemplateErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_ParseTemplateError.String(), "模板解析出现错误:"+fmt.Sprintf(format, args...))
}

func ParseTemplateError() *errors.Error {
	return errors.New(200, ErrorReason_ParseTemplateError.String(), "模板解析出现错误")
}

func IsVersionExistError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VersionExistError.String() && e.Code == 200
}

func VersionExistErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_VersionExistError.String(), "此版本已存在:"+fmt.Sprintf(format, args...))
}

func VersionExistError() *errors.Error {
	return errors.New(200, ErrorReason_VersionExistError.String(), "此版本已存在")
}

func IsWatchConfigureError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_WatchConfigureError.String() && e.Code == 200
}

func WatchConfigureErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(200, ErrorReason_WatchConfigureError.String(), "监听版本更新失败:"+fmt.Sprintf(format, args...))
}

func WatchConfigureError() *errors.Error {
	return errors.New(200, ErrorReason_WatchConfigureError.String(), "监听版本更新失败")
}

func IsRsaDecodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RsaDecodeError.String() && e.Code == 400
}

func RsaDecodeErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(400, ErrorReason_RsaDecodeError.String(), "rsa解密失败:"+fmt.Sprintf(format, args...))
}

func RsaDecodeError() *errors.Error {
	return errors.New(400, ErrorReason_RsaDecodeError.String(), "rsa解密失败")
}

func IsPasswordFormatError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordFormatError.String() && e.Code == 400
}

func PasswordFormatErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(400, ErrorReason_PasswordFormatError.String(), "密码格式错误:"+fmt.Sprintf(format, args...))
}

func PasswordFormatError() *errors.Error {
	return errors.New(400, ErrorReason_PasswordFormatError.String(), "密码格式错误")
}

func IsPasswordExpireError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PasswordExpireError.String() && e.Code == 400
}

func PasswordExpireErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(400, ErrorReason_PasswordExpireError.String(), "密码已过期:"+fmt.Sprintf(format, args...))
}

func PasswordExpireError() *errors.Error {
	return errors.New(400, ErrorReason_PasswordExpireError.String(), "密码已过期")
}

func IsUserPasswordError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserPasswordError.String() && e.Code == 400
}

func UserPasswordErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(400, ErrorReason_UserPasswordError.String(), "用户密码错误:"+fmt.Sprintf(format, args...))
}

func UserPasswordError() *errors.Error {
	return errors.New(400, ErrorReason_UserPasswordError.String(), "用户密码错误")
}

func IsNewTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NewTokenError.String() && e.Code == 400
}

func NewTokenErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(400, ErrorReason_NewTokenError.String(), "token生成失败:"+fmt.Sprintf(format, args...))
}

func NewTokenError() *errors.Error {
	return errors.New(400, ErrorReason_NewTokenError.String(), "token生成失败")
}

func IsRefreshTokenError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RefreshTokenError.String() && e.Code == 401
}

func RefreshTokenErrorFormat(format string, args ...any) *errors.Error {
	return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败:"+fmt.Sprintf(format, args...))
}

func RefreshTokenError() *errors.Error {
	return errors.New(401, ErrorReason_RefreshTokenError.String(), "刷新token失败")
}
