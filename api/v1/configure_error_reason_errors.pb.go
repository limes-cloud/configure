// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/limes-cloud/kratos/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsDatabase(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Database.String() && e.Code == 200
}

func ErrorDatabaseFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_Database.String(), "数据库错误:"+fmt.Sprintf(format, args...))
}

func ErrorDatabase() *errors.Error {
	return errors.New(200, ErrorReason_Database.String(), "数据库错误")
}

func IsTransform(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Transform.String() && e.Code == 200
}

func ErrorTransformFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_Transform.String(), "数据转换失败:"+fmt.Sprintf(format, args...))
}

func ErrorTransform() *errors.Error {
	return errors.New(200, ErrorReason_Transform.String(), "数据转换失败")
}

func IsAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AlreadyExists.String() && e.Code == 200
}

func ErrorAlreadyExistsFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExists.String(), "数据已存在:"+fmt.Sprintf(format, args...))
}

func ErrorAlreadyExists() *errors.Error {
	return errors.New(200, ErrorReason_AlreadyExists.String(), "数据已存在")
}

func IsParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Params.String() && e.Code == 200
}

func ErrorParamsFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_Params.String(), "参数错误:"+fmt.Sprintf(format, args...))
}

func ErrorParams() *errors.Error {
	return errors.New(200, ErrorReason_Params.String(), "参数错误")
}

func IsNotRecord(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotRecord.String() && e.Code == 200
}

func ErrorNotRecordFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_NotRecord.String(), "暂无数据记录:"+fmt.Sprintf(format, args...))
}

func ErrorNotRecord() *errors.Error {
	return errors.New(200, ErrorReason_NotRecord.String(), "暂无数据记录")
}

func IsResourceFormatValue(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ResourceFormatValue.String() && e.Code == 200
}

func ErrorResourceFormatValueFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_ResourceFormatValue.String(), "资源字段值格式错误:"+fmt.Sprintf(format, args...))
}

func ErrorResourceFormatValue() *errors.Error {
	return errors.New(200, ErrorReason_ResourceFormatValue.String(), "资源字段值格式错误")
}

func IsCheckTemplate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CheckTemplate.String() && e.Code == 200
}

func ErrorCheckTemplateFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_CheckTemplate.String(), "模板检测出现错误:"+fmt.Sprintf(format, args...))
}

func ErrorCheckTemplate() *errors.Error {
	return errors.New(200, ErrorReason_CheckTemplate.String(), "模板检测出现错误")
}

func IsParseTemplate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseTemplate.String() && e.Code == 200
}

func ErrorParseTemplateFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_ParseTemplate.String(), "模板解析出现错误:"+fmt.Sprintf(format, args...))
}

func ErrorParseTemplate() *errors.Error {
	return errors.New(200, ErrorReason_ParseTemplate.String(), "模板解析出现错误")
}

func IsVersionExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_VersionExist.String() && e.Code == 200
}

func ErrorVersionExistFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_VersionExist.String(), "此版本已存在:"+fmt.Sprintf(format, args...))
}

func ErrorVersionExist() *errors.Error {
	return errors.New(200, ErrorReason_VersionExist.String(), "此版本已存在")
}

func IsWatchConfigure(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_WatchConfigure.String() && e.Code == 200
}

func ErrorWatchConfigureFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ErrorReason_WatchConfigure.String(), "监听版本更新失败:"+fmt.Sprintf(format, args...))
}

func ErrorWatchConfigure() *errors.Error {
	return errors.New(200, ErrorReason_WatchConfigure.String(), "监听版本更新失败")
}

func IsRsaDecode(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RSA_DECODE.String() && e.Code == 400
}

func ErrorRsaDecodeFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_RSA_DECODE.String(), "rsa解密失败:"+fmt.Sprintf(format, args...))
}

func ErrorRsaDecode() *errors.Error {
	return errors.New(400, ErrorReason_RSA_DECODE.String(), "rsa解密失败")
}

func IsPasswordFormat(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_FORMAT.String() && e.Code == 400
}

func ErrorPasswordFormatFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_FORMAT.String(), "密码格式错误:"+fmt.Sprintf(format, args...))
}

func ErrorPasswordFormat() *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_FORMAT.String(), "密码格式错误")
}

func IsPasswordExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PASSWORD_EXPIRE.String() && e.Code == 400
}

func ErrorPasswordExpireFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_EXPIRE.String(), "密码已过期:"+fmt.Sprintf(format, args...))
}

func ErrorPasswordExpire() *errors.Error {
	return errors.New(400, ErrorReason_PASSWORD_EXPIRE.String(), "密码已过期")
}

func IsUserPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_PASSWORD.String() && e.Code == 400
}

func ErrorUserPasswordFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_USER_PASSWORD.String(), "用户密码错误:"+fmt.Sprintf(format, args...))
}

func ErrorUserPassword() *errors.Error {
	return errors.New(400, ErrorReason_USER_PASSWORD.String(), "用户密码错误")
}

func IsNewToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NEW_TOKEN.String() && e.Code == 400
}

func ErrorNewTokenFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_NEW_TOKEN.String(), "token生成失败:"+fmt.Sprintf(format, args...))
}

func ErrorNewToken() *errors.Error {
	return errors.New(400, ErrorReason_NEW_TOKEN.String(), "token生成失败")
}

func IsRefreshToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_REFRESH_TOKEN.String() && e.Code == 401
}

func ErrorRefreshTokenFormat(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_REFRESH_TOKEN.String(), "刷新token失败:"+fmt.Sprintf(format, args...))
}

func ErrorRefreshToken() *errors.Error {
	return errors.New(401, ErrorReason_REFRESH_TOKEN.String(), "刷新token失败")
}
