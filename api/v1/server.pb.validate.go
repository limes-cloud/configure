// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: server.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Keyword

	// no validation rules for Name

	// no validation rules for Description

	if m.Operator != nil {
		// no validation rules for Operator
	}

	if m.OperatorId != nil {
		// no validation rules for OperatorId
	}

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on PageServerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageServerRequestMultiError, or nil if none found.
func (m *PageServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PageServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := PageServerRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val <= 0 || val > 50 {
		err := PageServerRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range (0, 50]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if len(errors) > 0 {
		return PageServerRequestMultiError(errors)
	}

	return nil
}

// PageServerRequestMultiError is an error wrapping multiple validation errors
// returned by PageServerRequest.ValidateAll() if the designated constraints
// aren't met.
type PageServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageServerRequestMultiError) AllErrors() []error { return m }

// PageServerRequestValidationError is the validation error returned by
// PageServerRequest.Validate if the designated constraints aren't met.
type PageServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageServerRequestValidationError) ErrorName() string {
	return "PageServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PageServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageServerRequestValidationError{}

// Validate checks the field values on PageServerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageServerReplyMultiError, or nil if none found.
func (m *PageServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PageServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageServerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageServerReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageServerReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageServerReplyMultiError(errors)
	}

	return nil
}

// PageServerReplyMultiError is an error wrapping multiple validation errors
// returned by PageServerReply.ValidateAll() if the designated constraints
// aren't met.
type PageServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageServerReplyMultiError) AllErrors() []error { return m }

// PageServerReplyValidationError is the validation error returned by
// PageServerReply.Validate if the designated constraints aren't met.
type PageServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageServerReplyValidationError) ErrorName() string { return "PageServerReplyValidationError" }

// Error satisfies the builtin error interface
func (e PageServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageServerReplyValidationError{}

// Validate checks the field values on GetServerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServerRequestMultiError, or nil if none found.
func (m *GetServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.Keyword != nil {
		// no validation rules for Keyword
	}

	if len(errors) > 0 {
		return GetServerRequestMultiError(errors)
	}

	return nil
}

// GetServerRequestMultiError is an error wrapping multiple validation errors
// returned by GetServerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServerRequestMultiError) AllErrors() []error { return m }

// GetServerRequestValidationError is the validation error returned by
// GetServerRequest.Validate if the designated constraints aren't met.
type GetServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServerRequestValidationError) ErrorName() string { return "GetServerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServerRequestValidationError{}

// Validate checks the field values on GetServerReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetServerReplyMultiError,
// or nil if none found.
func (m *GetServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServerReplyValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServerReplyValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServerReplyValidationError{
				field:  "Server",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServerReplyMultiError(errors)
	}

	return nil
}

// GetServerReplyMultiError is an error wrapping multiple validation errors
// returned by GetServerReply.ValidateAll() if the designated constraints
// aren't met.
type GetServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServerReplyMultiError) AllErrors() []error { return m }

// GetServerReplyValidationError is the validation error returned by
// GetServerReply.Validate if the designated constraints aren't met.
type GetServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServerReplyValidationError) ErrorName() string { return "GetServerReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServerReplyValidationError{}

// Validate checks the field values on AddServerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddServerRequestMultiError, or nil if none found.
func (m *AddServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := AddServerRequestValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := AddServerRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := AddServerRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddServerRequestMultiError(errors)
	}

	return nil
}

// AddServerRequestMultiError is an error wrapping multiple validation errors
// returned by AddServerRequest.ValidateAll() if the designated constraints
// aren't met.
type AddServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddServerRequestMultiError) AllErrors() []error { return m }

// AddServerRequestValidationError is the validation error returned by
// AddServerRequest.Validate if the designated constraints aren't met.
type AddServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddServerRequestValidationError) ErrorName() string { return "AddServerRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddServerRequestValidationError{}

// Validate checks the field values on UpdateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServerRequestMultiError, or nil if none found.
func (m *UpdateServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateServerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetKeyword()); l < 1 || l > 32 {
		err := UpdateServerRequestValidationError{
			field:  "Keyword",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 32 {
		err := UpdateServerRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDescription()); l < 1 || l > 128 {
		err := UpdateServerRequestValidationError{
			field:  "Description",
			reason: "value length must be between 1 and 128 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateServerRequestMultiError(errors)
	}

	return nil
}

// UpdateServerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateServerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServerRequestMultiError) AllErrors() []error { return m }

// UpdateServerRequestValidationError is the validation error returned by
// UpdateServerRequest.Validate if the designated constraints aren't met.
type UpdateServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServerRequestValidationError) ErrorName() string {
	return "UpdateServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServerRequestValidationError{}

// Validate checks the field values on DeleteServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServerRequestMultiError, or nil if none found.
func (m *DeleteServerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteServerRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServerRequestMultiError(errors)
	}

	return nil
}

// DeleteServerRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteServerRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteServerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServerRequestMultiError) AllErrors() []error { return m }

// DeleteServerRequestValidationError is the validation error returned by
// DeleteServerRequest.Validate if the designated constraints aren't met.
type DeleteServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerRequestValidationError) ErrorName() string {
	return "DeleteServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerRequestValidationError{}
